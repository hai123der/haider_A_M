CCS PCM C Compiler, Version 5.015, 5967               27-‘»«ÿ-23 18:44

               Filename:   C:\Users\Windows.10\Desktop\PIC_Project\ccs\final code\final code.lst

               ROM used:   5571 words (68%)
                           Largest free fragment is 2048
               RAM used:   39 (11%) at main() level
                           82 (22%) worst case
               Stack used: 7 locations (6 in main + 1 for interrupts)
               Stack size: 8

*
0000:  MOVLW  12
0001:  MOVWF  0A
0002:  GOTO   293
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BSF    03.6
0016:  MOVF   0D,W
0017:  BCF    03.6
0018:  MOVWF  27
0019:  BSF    03.6
001A:  MOVF   0F,W
001B:  BCF    03.6
001C:  MOVWF  28
001D:  BSF    03.6
001E:  MOVF   0C,W
001F:  BCF    03.6
0020:  MOVWF  29
0021:  BSF    03.6
0022:  MOVF   0E,W
0023:  BCF    03.6
0024:  MOVWF  2A
0025:  BCF    03.7
0026:  BCF    03.5
0027:  MOVLW  8C
0028:  MOVWF  04
0029:  BTFSS  00.0
002A:  GOTO   02D
002B:  BTFSC  0C.0
002C:  GOTO   04E
002D:  MOVF   22,W
002E:  MOVWF  04
002F:  MOVF   23,W
0030:  MOVWF  77
0031:  MOVF   24,W
0032:  MOVWF  78
0033:  MOVF   25,W
0034:  MOVWF  79
0035:  MOVF   26,W
0036:  MOVWF  7A
0037:  MOVF   27,W
0038:  BSF    03.6
0039:  MOVWF  0D
003A:  BCF    03.6
003B:  MOVF   28,W
003C:  BSF    03.6
003D:  MOVWF  0F
003E:  BCF    03.6
003F:  MOVF   29,W
0040:  BSF    03.6
0041:  MOVWF  0C
0042:  BCF    03.6
0043:  MOVF   2A,W
0044:  BSF    03.6
0045:  MOVWF  0E
0046:  BCF    03.6
0047:  MOVF   20,W
0048:  MOVWF  0A
0049:  SWAPF  21,W
004A:  MOVWF  03
004B:  SWAPF  7F,F
004C:  SWAPF  7F,W
004D:  RETFIE
004E:  BCF    0A.3
004F:  BCF    0A.4
0050:  GOTO   051
.................... #define LCD_RS_PIN PIN_B1 
.................... #define LCD_RW_PIN PIN_B2 
.................... #define LCD_ENABLE_PIN PIN_B3 
.................... #define LCD_DATA4 PIN_B4 
.................... #define LCD_DATA5 PIN_B5 
.................... #define LCD_DATA6 PIN_B6 
.................... #define LCD_DATA7 PIN_B7 
.................... #include <16f877a.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
*
005C:  DATA C4,34
005D:  DATA 73,3A
005E:  DATA 61,37
005F:  DATA E3,32
0060:  DATA 3A,00
0061:  DATA 20,10
0062:  DATA D4,34
0063:  DATA ED,32
0064:  DATA A0,27
0065:  DATA 75,3A
0066:  DATA 20,10
0067:  DATA 00,01
0068:  DATA CF,3A
0069:  DATA 74,10
006A:  DATA 4F,33
006B:  DATA 20,29
006C:  DATA 61,37
006D:  DATA E7,32
006E:  DATA 00,00
006F:  DATA 20,10
0070:  DATA 20,10
0071:  DATA 20,10
0072:  DATA A0,31
0073:  DATA 6D,10
0074:  DATA 20,10
0075:  DATA 00,01
0076:  DATA 0C,00
0077:  DATA F6,37
0078:  DATA 6C,3A
0079:  DATA 3D,10
007A:  DATA 00,00
007B:  DATA 0C,00
007C:  DATA E6,37
007D:  DATA 65,10
007E:  DATA F3,32
007F:  DATA 74,10
0080:  DATA 73,38
0081:  DATA E5,32
0082:  DATA 64,10
0083:  DATA 00,01
0084:  DATA 65,37
0085:  DATA F4,32
0086:  DATA 72,10
0087:  DATA 20,18
0088:  DATA 20,00
0089:  DATA 0C,00
008A:  DATA 2A,10
008B:  DATA E6,37
008C:  DATA 72,10
008D:  DATA 75,38
008E:  DATA A0,39
008F:  DATA F0,32
0090:  DATA 65,32
0091:  DATA 00,01
0092:  DATA 23,10
0093:  DATA E6,37
0094:  DATA 72,10
0095:  DATA E4,37
0096:  DATA 77,37
0097:  DATA A0,39
0098:  DATA F0,32
0099:  DATA 65,32
009A:  DATA 20,00
009B:  DATA 30,10
009C:  DATA E6,37
009D:  DATA 72,10
009E:  DATA 73,3A
009F:  DATA 61,39
00A0:  DATA 74,00
00A1:  DATA D0,2B
00A2:  DATA 4D,10
00A3:  DATA 3D,10
00A4:  DATA 25,33
00A5:  DATA 20,00
00A6:  DATA 0C,00
00A7:  DATA F3,32
00A8:  DATA 74,10
00A9:  DATA 74,34
00AA:  DATA 65,10
00AB:  DATA F4,34
00AC:  DATA ED,32
00AD:  DATA 20,10
00AE:  DATA 00,01
00AF:  DATA 69,37
00B0:  DATA F0,3A
00B1:  DATA 74,10
00B2:  DATA 2A,10
00B3:  DATA E6,37
00B4:  DATA 72,10
00B5:  DATA 75,38
00B6:  DATA 20,00
00B7:  DATA 69,37
00B8:  DATA F0,3A
00B9:  DATA 74,10
00BA:  DATA 23,10
00BB:  DATA E6,37
00BC:  DATA 72,10
00BD:  DATA E4,37
00BE:  DATA 77,37
00BF:  DATA 00,01
00C0:  DATA 69,37
00C1:  DATA F0,3A
00C2:  DATA 74,10
00C3:  DATA 30,10
00C4:  DATA E6,37
00C5:  DATA 72,10
00C6:  DATA 73,3A
00C7:  DATA 61,39
00C8:  DATA 74,00
00C9:  DATA 0C,00
00CA:  DATA F3,32
00CB:  DATA 74,10
00CC:  DATA 74,34
00CD:  DATA 65,10
00CE:  DATA 73,38
00CF:  DATA E5,32
00D0:  DATA 64,10
00D1:  DATA 20,00
00D2:  DATA 0C,00
00D3:  DATA 2A,10
00D4:  DATA E6,37
00D5:  DATA 72,10
00D6:  DATA 75,38
00D7:  DATA A0,39
00D8:  DATA F0,32
00D9:  DATA 65,32
00DA:  DATA 00,01
00DB:  DATA 23,10
00DC:  DATA E6,37
00DD:  DATA 72,10
00DE:  DATA E4,37
00DF:  DATA 77,37
00E0:  DATA A0,39
00E1:  DATA F0,32
00E2:  DATA 65,32
00E3:  DATA 20,00
00E4:  DATA 30,10
00E5:  DATA E6,37
00E6:  DATA 72,10
00E7:  DATA 73,3A
00E8:  DATA 61,39
00E9:  DATA 74,00
00EA:  DATA D0,2B
00EB:  DATA 4D,10
00EC:  DATA 3D,10
00ED:  DATA 25,33
00EE:  DATA 20,00
00EF:  DATA 0C,00
00F0:  DATA 0C,00
00F1:  DATA 69,37
00F2:  DATA E3,37
00F3:  DATA 72,39
00F4:  DATA E5,31
00F5:  DATA 74,10
00F6:  DATA 00,01
00F7:  DATA 69,37
00F8:  DATA F0,3A
00F9:  DATA 74,10
00FA:  DATA 00,00
00FB:  DATA 0C,00
00FC:  DATA 69,37
00FD:  DATA E3,37
00FE:  DATA 72,39
00FF:  DATA E5,31
0100:  DATA 74,10
0101:  DATA 00,00
0102:  DATA 0C,00
0103:  DATA E3,37
0104:  DATA 75,37
0105:  DATA F4,32
0106:  DATA 72,10
0107:  DATA 3D,10
0108:  DATA 25,36
0109:  DATA 75,00
010A:  DATA D0,24
010B:  DATA C3,18
010C:  DATA 36,23
010D:  DATA B8,1B
010E:  DATA B7,20
010F:  DATA A0,2A
0110:  DATA 41,29
0111:  DATA 54,10
0112:  DATA 65,3C
0113:  DATA E1,36
0114:  DATA 70,36
0115:  DATA 65,00
0116:  DATA 49,10
0117:  DATA E8,37
0118:  DATA F0,32
0119:  DATA 20,3A
011A:  DATA E8,34
011B:  DATA 73,10
011C:  DATA E2,37
011D:  DATA 61,39
011E:  DATA 64,10
011F:  DATA 20,31
0120:  DATA 65,37
0121:  DATA 65,33
0122:  DATA 69,3A
0123:  DATA A0,3C
0124:  DATA EF,3A
0125:  DATA 00,00
0126:  DATA 65,37
0127:  DATA F4,32
0128:  DATA 72,10
0129:  DATA 61,10
012A:  DATA EE,3A
012B:  DATA 6D,31
012C:  DATA 65,39
012D:  DATA 20,3A
012E:  DATA 6F,10
012F:  DATA 00,01
0130:  DATA 63,34
0131:  DATA EF,37
0132:  DATA F3,32
0133:  DATA A0,30
0134:  DATA 20,33
0135:  DATA 75,37
0136:  DATA 63,10
0137:  DATA 00,01
0138:  DATA 0C,00
0139:  DATA A8,18
013A:  DATA 29,10
013B:  DATA ED,37
013C:  DATA F4,37
013D:  DATA F2,39
013E:  DATA 20,00
013F:  DATA 28,19
0140:  DATA 29,10
0141:  DATA F3,32
0142:  DATA EE,39
0143:  DATA 6F,39
0144:  DATA 73,00
0145:  DATA A8,19
0146:  DATA 29,10
0147:  DATA 65,37
0148:  DATA E3,37
0149:  DATA E4,32
014A:  DATA 72,00
014B:  DATA 28,1A
014C:  DATA 29,10
014D:  DATA EC,32
014E:  DATA E4,39
014F:  DATA 20,10
0150:  DATA 20,14
0151:  DATA B5,14
0152:  DATA A0,3A
0153:  DATA 61,39
0154:  DATA 74,00
0155:  DATA 0C,00
0156:  DATA A8,18
0157:  DATA 29,10
0158:  DATA C4,21
0159:  DATA A0,36
015A:  DATA 6F,3A
015B:  DATA 6F,39
015C:  DATA 20,00
015D:  DATA 28,19
015E:  DATA 29,10
015F:  DATA 53,3A
0160:  DATA 65,38
0161:  DATA F0,32
0162:  DATA 72,10
0163:  DATA 00,01
0164:  DATA 0C,00
0165:  DATA 20,22
0166:  DATA 6F,10
0167:  DATA F9,37
0168:  DATA 75,10
0169:  DATA F7,30
016A:  DATA 6E,3A
016B:  DATA 20,3A
016C:  DATA E9,36
016D:  DATA 65,10
016E:  DATA 3F,10
016F:  DATA 0A,10
0170:  DATA 00,01
0171:  DATA B1,14
0172:  DATA A0,3C
0173:  DATA E5,39
0174:  DATA 00,01
0175:  DATA B2,14
0176:  DATA 20,37
0177:  DATA 6F,00
0178:  DATA 0C,00
0179:  DATA 0C,00
017A:  DATA 69,37
017B:  DATA E3,37
017C:  DATA 72,39
017D:  DATA E5,31
017E:  DATA 74,10
017F:  DATA 00,01
0180:  DATA 69,37
0181:  DATA F0,3A
0182:  DATA 74,10
0183:  DATA 00,01
0184:  DATA 0C,00
0185:  DATA B1,14
0186:  DATA 20,33
0187:  DATA 69,39
0188:  DATA 73,3A
0189:  DATA 20,32
018A:  DATA 69,39
018B:  DATA E5,31
018C:  DATA F4,34
018D:  DATA 6F,37
018E:  DATA 00,01
018F:  DATA B2,14
0190:  DATA A0,39
0191:  DATA E5,31
0192:  DATA 6F,37
0193:  DATA 64,10
0194:  DATA E4,34
0195:  DATA F2,32
0196:  DATA 63,3A
0197:  DATA E9,37
0198:  DATA 6E,00
0199:  DATA 0C,00
019A:  DATA A8,18
019B:  DATA 29,10
019C:  DATA A0,3A
019D:  DATA 6C,3A
019E:  DATA F2,30
019F:  DATA A0,39
01A0:  DATA 6F,37
01A1:  DATA E9,31
01A2:  DATA 6B,10
01A3:  DATA 00,01
01A4:  DATA 28,19
01A5:  DATA 29,36
01A6:  DATA ED,19
01A7:  DATA 35,00
01A8:  DATA A8,19
01A9:  DATA 29,10
01AA:  DATA F0,37
01AB:  DATA 74,00
01AC:  DATA 0C,00
01AD:  DATA 69,37
01AE:  DATA E3,37
01AF:  DATA 72,39
01B0:  DATA E5,31
01B1:  DATA 74,10
01B2:  DATA 00,01
01B3:  DATA 0C,00
01B4:  DATA 0C,00
01B5:  DATA 0C,00
01B6:  DATA 0C,00
01B7:  DATA 69,37
01B8:  DATA E3,37
01B9:  DATA 72,39
01BA:  DATA E5,31
01BB:  DATA 74,10
01BC:  DATA 00,01
01BD:  DATA 69,37
01BE:  DATA F0,3A
01BF:  DATA 74,10
01C0:  DATA 00,00
*
0310:  MOVF   0B,W
0311:  MOVWF  47
0312:  BCF    0B.7
0313:  BSF    03.5
0314:  BSF    03.6
0315:  BSF    0C.7
0316:  BSF    0C.0
0317:  NOP
0318:  NOP
0319:  BCF    03.5
031A:  BCF    03.6
031B:  BTFSC  47.7
031C:  BSF    0B.7
031D:  BSF    03.6
031E:  MOVF   0C,W
031F:  ANDLW  7F
0320:  BTFSC  03.2
0321:  GOTO   364
0322:  BCF    03.6
0323:  MOVWF  47
0324:  BSF    03.6
0325:  MOVF   0D,W
0326:  BCF    03.6
0327:  MOVWF  48
0328:  BSF    03.6
0329:  MOVF   0F,W
032A:  BCF    03.6
032B:  MOVWF  49
032C:  MOVF   47,W
032D:  MOVWF  60
032E:  CALL   2E4
032F:  MOVF   48,W
0330:  BSF    03.6
0331:  MOVWF  0D
0332:  BCF    03.6
0333:  MOVF   49,W
0334:  BSF    03.6
0335:  MOVWF  0F
0336:  BCF    03.6
0337:  MOVF   0B,W
0338:  MOVWF  4A
0339:  BCF    0B.7
033A:  BSF    03.5
033B:  BSF    03.6
033C:  BSF    0C.7
033D:  BSF    0C.0
033E:  NOP
033F:  NOP
0340:  BCF    03.5
0341:  BCF    03.6
0342:  BTFSC  4A.7
0343:  BSF    0B.7
0344:  BSF    03.6
0345:  RLF    0C,W
0346:  RLF    0E,W
0347:  ANDLW  7F
0348:  BTFSC  03.2
0349:  GOTO   364
034A:  BCF    03.6
034B:  MOVWF  47
034C:  BSF    03.6
034D:  MOVF   0D,W
034E:  BCF    03.6
034F:  MOVWF  48
0350:  BSF    03.6
0351:  MOVF   0F,W
0352:  BCF    03.6
0353:  MOVWF  49
0354:  MOVF   47,W
0355:  MOVWF  60
0356:  CALL   2E4
0357:  MOVF   48,W
0358:  BSF    03.6
0359:  MOVWF  0D
035A:  BCF    03.6
035B:  MOVF   49,W
035C:  BSF    03.6
035D:  MOVWF  0F
035E:  INCF   0D,F
035F:  BTFSC  03.2
0360:  INCF   0F,F
0361:  BCF    03.6
0362:  GOTO   310
0363:  BSF    03.6
0364:  BCF    03.6
0365:  RETURN
*
0447:  MOVF   0B,W
0448:  MOVWF  42
0449:  BCF    0B.7
044A:  BSF    03.5
044B:  BSF    03.6
044C:  BSF    0C.7
044D:  BSF    0C.0
044E:  NOP
044F:  NOP
0450:  BCF    03.5
0451:  BCF    03.6
0452:  BTFSC  42.7
0453:  BSF    0B.7
0454:  BTFSC  03.0
0455:  GOTO   47E
0456:  BSF    03.6
0457:  MOVF   0C,W
0458:  ANDLW  7F
0459:  BCF    03.6
045A:  MOVWF  42
045B:  BSF    03.6
045C:  MOVF   0D,W
045D:  BCF    03.6
045E:  MOVWF  43
045F:  BSF    03.6
0460:  MOVF   0F,W
0461:  BCF    03.6
0462:  MOVWF  44
0463:  MOVF   42,W
0464:  MOVWF  60
0465:  CALL   2E4
0466:  MOVF   43,W
0467:  BSF    03.6
0468:  MOVWF  0D
0469:  BCF    03.6
046A:  MOVF   44,W
046B:  BSF    03.6
046C:  MOVWF  0F
046D:  BCF    03.6
046E:  MOVF   0B,W
046F:  MOVWF  45
0470:  BCF    0B.7
0471:  BSF    03.5
0472:  BSF    03.6
0473:  BSF    0C.7
0474:  BSF    0C.0
0475:  NOP
0476:  NOP
0477:  BCF    03.5
0478:  BCF    03.6
0479:  BTFSC  45.7
047A:  BSF    0B.7
047B:  DECFSZ 41,F
047C:  GOTO   47E
047D:  GOTO   49D
047E:  BSF    03.6
047F:  RLF    0C,W
0480:  RLF    0E,W
0481:  ANDLW  7F
0482:  BCF    03.6
0483:  MOVWF  42
0484:  BSF    03.6
0485:  MOVF   0D,W
0486:  BCF    03.6
0487:  MOVWF  43
0488:  BSF    03.6
0489:  MOVF   0F,W
048A:  BCF    03.6
048B:  MOVWF  44
048C:  MOVF   42,W
048D:  MOVWF  60
048E:  CALL   2E4
048F:  MOVF   43,W
0490:  BSF    03.6
0491:  MOVWF  0D
0492:  BCF    03.6
0493:  MOVF   44,W
0494:  BSF    03.6
0495:  MOVWF  0F
0496:  INCF   0D,F
0497:  BTFSC  03.2
0498:  INCF   0F,F
0499:  BCF    03.0
049A:  BCF    03.6
049B:  DECFSZ 41,F
049C:  GOTO   447
049D:  RETURN
049E:  MOVF   60,W
049F:  BTFSC  03.2
04A0:  GOTO   50E
04A1:  MOVWF  68
04A2:  MOVF   64,W
04A3:  BTFSC  03.2
04A4:  GOTO   50E
04A5:  ADDWF  68,F
04A6:  BTFSC  03.0
04A7:  GOTO   4AF
04A8:  MOVLW  7F
04A9:  SUBWF  68,F
04AA:  BTFSS  03.0
04AB:  GOTO   50E
04AC:  BTFSC  03.2
04AD:  GOTO   50E
04AE:  GOTO   4B3
04AF:  MOVLW  81
04B0:  ADDWF  68,F
04B1:  BTFSC  03.0
04B2:  GOTO   50E
04B3:  MOVF   68,W
04B4:  MOVWF  77
04B5:  CLRF   78
04B6:  CLRF   79
04B7:  CLRF   7A
04B8:  MOVF   61,W
04B9:  MOVWF  6C
04BA:  BSF    6C.7
04BB:  MOVF   62,W
04BC:  MOVWF  6B
04BD:  MOVF   63,W
04BE:  MOVWF  6A
04BF:  MOVLW  18
04C0:  MOVWF  68
04C1:  CLRF   69
04C2:  BTFSS  6A.0
04C3:  GOTO   4DC
04C4:  MOVF   67,W
04C5:  ADDWF  7A,F
04C6:  BTFSS  03.0
04C7:  GOTO   4CE
04C8:  INCF   79,F
04C9:  BTFSS  03.2
04CA:  GOTO   4CE
04CB:  INCF   78,F
04CC:  BTFSC  03.2
04CD:  BSF    69.7
04CE:  MOVF   66,W
04CF:  ADDWF  79,F
04D0:  BTFSS  03.0
04D1:  GOTO   4D5
04D2:  INCF   78,F
04D3:  BTFSC  03.2
04D4:  BSF    69.7
04D5:  MOVF   65,W
04D6:  MOVWF  62
04D7:  BSF    62.7
04D8:  MOVF   62,W
04D9:  ADDWF  78,F
04DA:  BTFSC  03.0
04DB:  BSF    69.7
04DC:  RLF    69,F
04DD:  RRF    78,F
04DE:  RRF    79,F
04DF:  RRF    7A,F
04E0:  RRF    6C,F
04E1:  RRF    6B,F
04E2:  RRF    6A,F
04E3:  BCF    03.0
04E4:  DECFSZ 68,F
04E5:  GOTO   4C1
04E6:  MOVLW  01
04E7:  ADDWF  77,F
04E8:  BTFSC  03.0
04E9:  GOTO   50E
04EA:  BTFSC  78.7
04EB:  GOTO   4F3
04EC:  RLF    6C,F
04ED:  RLF    7A,F
04EE:  RLF    79,F
04EF:  RLF    78,F
04F0:  DECF   77,F
04F1:  BTFSC  03.2
04F2:  GOTO   50E
04F3:  BTFSS  6C.7
04F4:  GOTO   504
04F5:  INCF   7A,F
04F6:  BTFSS  03.2
04F7:  GOTO   504
04F8:  INCF   79,F
04F9:  BTFSS  03.2
04FA:  GOTO   504
04FB:  INCF   78,F
04FC:  BTFSS  03.2
04FD:  GOTO   504
04FE:  RRF    78,F
04FF:  RRF    79,F
0500:  RRF    7A,F
0501:  INCF   77,F
0502:  BTFSC  03.2
0503:  GOTO   50E
0504:  MOVF   61,W
0505:  MOVWF  69
0506:  MOVF   65,W
0507:  XORWF  69,F
0508:  BTFSS  69.7
0509:  GOTO   50C
050A:  BSF    78.7
050B:  GOTO   512
050C:  BCF    78.7
050D:  GOTO   512
050E:  CLRF   77
050F:  CLRF   78
0510:  CLRF   79
0511:  CLRF   7A
0512:  RETURN
0513:  BTFSC  03.1
0514:  GOTO   518
0515:  MOVLW  5C
0516:  MOVWF  04
0517:  BCF    03.7
0518:  CLRF   77
0519:  CLRF   78
051A:  CLRF   79
051B:  CLRF   7A
051C:  CLRF   5C
051D:  CLRF   5D
051E:  CLRF   5E
051F:  CLRF   5F
0520:  MOVF   5B,W
0521:  IORWF  5A,W
0522:  IORWF  59,W
0523:  IORWF  58,W
0524:  BTFSC  03.2
0525:  GOTO   556
0526:  MOVLW  20
0527:  MOVWF  60
0528:  BCF    03.0
0529:  RLF    54,F
052A:  RLF    55,F
052B:  RLF    56,F
052C:  RLF    57,F
052D:  RLF    5C,F
052E:  RLF    5D,F
052F:  RLF    5E,F
0530:  RLF    5F,F
0531:  MOVF   5B,W
0532:  SUBWF  5F,W
0533:  BTFSS  03.2
0534:  GOTO   53F
0535:  MOVF   5A,W
0536:  SUBWF  5E,W
0537:  BTFSS  03.2
0538:  GOTO   53F
0539:  MOVF   59,W
053A:  SUBWF  5D,W
053B:  BTFSS  03.2
053C:  GOTO   53F
053D:  MOVF   58,W
053E:  SUBWF  5C,W
053F:  BTFSS  03.0
0540:  GOTO   550
0541:  MOVF   58,W
0542:  SUBWF  5C,F
0543:  MOVF   59,W
0544:  BTFSS  03.0
0545:  INCFSZ 59,W
0546:  SUBWF  5D,F
0547:  MOVF   5A,W
0548:  BTFSS  03.0
0549:  INCFSZ 5A,W
054A:  SUBWF  5E,F
054B:  MOVF   5B,W
054C:  BTFSS  03.0
054D:  INCFSZ 5B,W
054E:  SUBWF  5F,F
054F:  BSF    03.0
0550:  RLF    77,F
0551:  RLF    78,F
0552:  RLF    79,F
0553:  RLF    7A,F
0554:  DECFSZ 60,F
0555:  GOTO   528
0556:  MOVF   5C,W
0557:  MOVWF  00
0558:  INCF   04,F
0559:  MOVF   5D,W
055A:  MOVWF  00
055B:  INCF   04,F
055C:  MOVF   5E,W
055D:  MOVWF  00
055E:  INCF   04,F
055F:  MOVF   5F,W
0560:  MOVWF  00
0561:  RETURN
0562:  MOVF   04,W
0563:  MOVWF  4C
0564:  MOVF   4B,W
0565:  MOVWF  4E
0566:  BTFSC  03.2
0567:  GOTO   581
0568:  MOVF   4A,W
0569:  MOVWF  63
056A:  MOVF   49,W
056B:  MOVWF  62
056C:  MOVF   48,W
056D:  MOVWF  61
056E:  MOVF   47,W
056F:  MOVWF  60
0570:  CLRF   67
0571:  CLRF   66
0572:  MOVLW  20
0573:  MOVWF  65
0574:  MOVLW  82
0575:  MOVWF  64
0576:  CALL   49E
0577:  MOVF   7A,W
0578:  MOVWF  4A
0579:  MOVF   79,W
057A:  MOVWF  49
057B:  MOVF   78,W
057C:  MOVWF  48
057D:  MOVF   77,W
057E:  MOVWF  47
057F:  DECFSZ 4E,F
0580:  GOTO   568
0581:  MOVF   4A,W
0582:  MOVWF  57
0583:  MOVF   49,W
0584:  MOVWF  56
0585:  MOVF   48,W
0586:  MOVWF  55
0587:  MOVF   47,W
0588:  MOVWF  54
0589:  MOVF   54,W
058A:  SUBLW  B6
058B:  MOVWF  54
058C:  CLRF   7A
058D:  MOVF   55,W
058E:  MOVWF  58
058F:  BSF    55.7
0590:  BCF    03.0
0591:  RRF    55,F
0592:  RRF    56,F
0593:  RRF    57,F
0594:  RRF    7A,F
0595:  RRF    79,F
0596:  RRF    78,F
0597:  RRF    77,F
0598:  DECFSZ 54,F
0599:  GOTO   590
059A:  BTFSS  58.7
059B:  GOTO   5A7
059C:  COMF   77,F
059D:  COMF   78,F
059E:  COMF   79,F
059F:  COMF   7A,F
05A0:  INCF   77,F
05A1:  BTFSC  03.2
05A2:  INCF   78,F
05A3:  BTFSC  03.2
05A4:  INCF   79,F
05A5:  BTFSC  03.2
05A6:  INCF   7A,F
05A7:  MOVF   7A,W
05A8:  MOVWF  4A
05A9:  MOVF   79,W
05AA:  MOVWF  49
05AB:  MOVF   78,W
05AC:  MOVWF  48
05AD:  MOVF   77,W
05AE:  MOVWF  47
05AF:  BTFSS  4A.7
05B0:  GOTO   5BE
05B1:  DECF   4C,F
05B2:  BSF    4C.5
05B3:  COMF   47,F
05B4:  COMF   48,F
05B5:  COMF   49,F
05B6:  COMF   4A,F
05B7:  INCF   47,F
05B8:  BTFSC  03.2
05B9:  INCF   48,F
05BA:  BTFSC  03.2
05BB:  INCF   49,F
05BC:  BTFSC  03.2
05BD:  INCF   4A,F
05BE:  MOVLW  3B
05BF:  MOVWF  53
05C0:  MOVLW  9A
05C1:  MOVWF  52
05C2:  MOVLW  CA
05C3:  MOVWF  51
05C4:  CLRF   50
05C5:  MOVLW  0A
05C6:  MOVWF  4E
05C7:  MOVF   4B,W
05C8:  BTFSC  03.2
05C9:  INCF   4C,F
05CA:  BSF    03.1
05CB:  MOVLW  47
05CC:  MOVWF  04
05CD:  BCF    03.7
05CE:  MOVF   4A,W
05CF:  MOVWF  57
05D0:  MOVF   49,W
05D1:  MOVWF  56
05D2:  MOVF   48,W
05D3:  MOVWF  55
05D4:  MOVF   47,W
05D5:  MOVWF  54
05D6:  MOVF   53,W
05D7:  MOVWF  5B
05D8:  MOVF   52,W
05D9:  MOVWF  5A
05DA:  MOVF   51,W
05DB:  MOVWF  59
05DC:  MOVF   50,W
05DD:  MOVWF  58
05DE:  CALL   513
05DF:  MOVF   78,W
05E0:  MOVF   77,F
05E1:  BTFSS  03.2
05E2:  GOTO   5F6
05E3:  INCF   4B,W
05E4:  SUBWF  4E,W
05E5:  BTFSC  03.2
05E6:  GOTO   5F6
05E7:  MOVF   4C,W
05E8:  BTFSC  03.2
05E9:  GOTO   5F8
05EA:  ANDLW  0F
05EB:  SUBWF  4E,W
05EC:  BTFSC  03.2
05ED:  GOTO   5F0
05EE:  BTFSC  03.0
05EF:  GOTO   628
05F0:  BTFSC  4C.7
05F1:  GOTO   628
05F2:  BTFSC  4C.6
05F3:  GOTO   5F8
05F4:  MOVLW  20
05F5:  GOTO   624
05F6:  MOVLW  20
05F7:  ANDWF  4C,F
05F8:  BTFSS  4C.5
05F9:  GOTO   606
05FA:  BCF    4C.5
05FB:  MOVF   4B,W
05FC:  BTFSS  03.2
05FD:  DECF   4C,F
05FE:  MOVF   77,W
05FF:  MOVWF  4C
0600:  MOVLW  2D
0601:  MOVWF  60
0602:  CALL   2E4
0603:  MOVF   4C,W
0604:  MOVWF  77
0605:  CLRF   4C
0606:  MOVF   4B,W
0607:  SUBWF  4E,W
0608:  BTFSS  03.2
0609:  GOTO   614
060A:  MOVF   77,W
060B:  MOVWF  4C
060C:  MOVLW  2E
060D:  MOVWF  60
060E:  CALL   2E4
060F:  MOVF   4C,W
0610:  MOVWF  77
0611:  MOVLW  20
0612:  ANDWF  4C,F
0613:  MOVLW  00
0614:  MOVLW  30
0615:  BTFSS  4C.5
0616:  GOTO   624
0617:  BCF    4C.5
0618:  MOVF   4B,W
0619:  BTFSS  03.2
061A:  DECF   4C,F
061B:  MOVF   77,W
061C:  MOVWF  4C
061D:  MOVLW  2D
061E:  MOVWF  60
061F:  CALL   2E4
0620:  MOVF   4C,W
0621:  MOVWF  77
0622:  CLRF   4C
0623:  MOVLW  30
0624:  ADDWF  77,F
0625:  MOVF   77,W
0626:  MOVWF  60
0627:  CALL   2E4
0628:  BCF    03.1
0629:  MOVF   53,W
062A:  MOVWF  57
062B:  MOVF   52,W
062C:  MOVWF  56
062D:  MOVF   51,W
062E:  MOVWF  55
062F:  MOVF   50,W
0630:  MOVWF  54
0631:  CLRF   5B
0632:  CLRF   5A
0633:  CLRF   59
0634:  MOVLW  0A
0635:  MOVWF  58
0636:  CALL   513
0637:  MOVF   7A,W
0638:  MOVWF  53
0639:  MOVF   79,W
063A:  MOVWF  52
063B:  MOVF   78,W
063C:  MOVWF  51
063D:  MOVF   77,W
063E:  MOVWF  50
063F:  DECFSZ 4E,F
0640:  GOTO   5CA
0641:  RETURN
0642:  MOVLW  80
0643:  BTFSC  03.1
0644:  XORWF  46,F
0645:  CLRF   4B
0646:  CLRF   4C
0647:  MOVF   42,W
0648:  MOVWF  4A
0649:  MOVF   46,W
064A:  XORWF  4A,F
064B:  MOVF   41,W
064C:  BTFSC  03.2
064D:  GOTO   732
064E:  MOVWF  49
064F:  MOVWF  77
0650:  MOVF   45,W
0651:  BTFSC  03.2
0652:  GOTO   73B
0653:  SUBWF  49,F
0654:  BTFSC  03.2
0655:  GOTO   6D7
0656:  BTFSS  03.0
0657:  GOTO   695
0658:  MOVF   46,W
0659:  MOVWF  4F
065A:  BSF    4F.7
065B:  MOVF   47,W
065C:  MOVWF  4E
065D:  MOVF   48,W
065E:  MOVWF  4D
065F:  CLRF   4C
0660:  BCF    03.0
0661:  RRF    4F,F
0662:  RRF    4E,F
0663:  RRF    4D,F
0664:  RRF    4C,F
0665:  DECFSZ 49,F
0666:  GOTO   65F
0667:  BTFSS  4A.7
0668:  GOTO   66C
0669:  BSF    4B.0
066A:  GOTO   74F
066B:  BCF    4B.0
066C:  BCF    49.0
066D:  BSF    4B.4
066E:  MOVLW  44
066F:  MOVWF  04
0670:  BCF    03.7
0671:  GOTO   764
0672:  BCF    4B.4
0673:  BTFSC  4A.7
0674:  GOTO   67F
0675:  BTFSS  49.0
0676:  GOTO   68A
0677:  RRF    4F,F
0678:  RRF    4E,F
0679:  RRF    4D,F
067A:  RRF    4C,F
067B:  INCF   77,F
067C:  BTFSC  03.2
067D:  GOTO   74A
067E:  GOTO   68A
067F:  BTFSC  4F.7
0680:  GOTO   68D
0681:  BCF    03.0
0682:  RLF    4C,F
0683:  RLF    4D,F
0684:  RLF    4E,F
0685:  RLF    4F,F
0686:  DECF   77,F
0687:  BTFSC  03.2
0688:  GOTO   74A
0689:  GOTO   67F
068A:  BSF    4B.6
068B:  GOTO   6F7
068C:  BCF    4B.6
068D:  MOVF   42,W
068E:  MOVWF  4A
068F:  BTFSS  4A.7
0690:  GOTO   693
0691:  BSF    4F.7
0692:  GOTO   743
0693:  BCF    4F.7
0694:  GOTO   743
0695:  MOVF   45,W
0696:  MOVWF  49
0697:  MOVWF  77
0698:  MOVF   41,W
0699:  SUBWF  49,F
069A:  MOVF   42,W
069B:  MOVWF  4F
069C:  BSF    4F.7
069D:  MOVF   43,W
069E:  MOVWF  4E
069F:  MOVF   44,W
06A0:  MOVWF  4D
06A1:  CLRF   4C
06A2:  BCF    03.0
06A3:  RRF    4F,F
06A4:  RRF    4E,F
06A5:  RRF    4D,F
06A6:  RRF    4C,F
06A7:  DECFSZ 49,F
06A8:  GOTO   6A1
06A9:  BTFSS  4A.7
06AA:  GOTO   6AE
06AB:  BSF    4B.1
06AC:  GOTO   74F
06AD:  BCF    4B.1
06AE:  BCF    49.0
06AF:  BSF    4B.5
06B0:  MOVLW  48
06B1:  MOVWF  04
06B2:  BCF    03.7
06B3:  GOTO   764
06B4:  BCF    4B.5
06B5:  BTFSC  4A.7
06B6:  GOTO   6C1
06B7:  BTFSS  49.0
06B8:  GOTO   6CC
06B9:  RRF    4F,F
06BA:  RRF    4E,F
06BB:  RRF    4D,F
06BC:  RRF    4C,F
06BD:  INCF   77,F
06BE:  BTFSC  03.2
06BF:  GOTO   74A
06C0:  GOTO   6CC
06C1:  BTFSC  4F.7
06C2:  GOTO   6CF
06C3:  BCF    03.0
06C4:  RLF    4C,F
06C5:  RLF    4D,F
06C6:  RLF    4E,F
06C7:  RLF    4F,F
06C8:  DECF   77,F
06C9:  BTFSC  03.2
06CA:  GOTO   74A
06CB:  GOTO   6C1
06CC:  BSF    4B.7
06CD:  GOTO   6F7
06CE:  BCF    4B.7
06CF:  MOVF   46,W
06D0:  MOVWF  4A
06D1:  BTFSS  4A.7
06D2:  GOTO   6D5
06D3:  BSF    4F.7
06D4:  GOTO   743
06D5:  BCF    4F.7
06D6:  GOTO   743
06D7:  MOVF   46,W
06D8:  MOVWF  4F
06D9:  BSF    4F.7
06DA:  MOVF   47,W
06DB:  MOVWF  4E
06DC:  MOVF   48,W
06DD:  MOVWF  4D
06DE:  BTFSS  4A.7
06DF:  GOTO   6E4
06E0:  BCF    4F.7
06E1:  BSF    4B.2
06E2:  GOTO   74F
06E3:  BCF    4B.2
06E4:  CLRF   4C
06E5:  BCF    49.0
06E6:  MOVLW  44
06E7:  MOVWF  04
06E8:  BCF    03.7
06E9:  GOTO   764
06EA:  BTFSC  4A.7
06EB:  GOTO   70D
06EC:  MOVF   42,W
06ED:  MOVWF  4A
06EE:  BTFSS  49.0
06EF:  GOTO   6F7
06F0:  RRF    4F,F
06F1:  RRF    4E,F
06F2:  RRF    4D,F
06F3:  RRF    4C,F
06F4:  INCF   77,F
06F5:  BTFSC  03.2
06F6:  GOTO   74A
06F7:  BTFSS  4C.7
06F8:  GOTO   708
06F9:  INCF   4D,F
06FA:  BTFSS  03.2
06FB:  GOTO   708
06FC:  INCF   4E,F
06FD:  BTFSS  03.2
06FE:  GOTO   708
06FF:  INCF   4F,F
0700:  BTFSS  03.2
0701:  GOTO   708
0702:  RRF    4F,F
0703:  RRF    4E,F
0704:  RRF    4D,F
0705:  INCF   77,F
0706:  BTFSC  03.2
0707:  GOTO   74A
0708:  BTFSC  4B.6
0709:  GOTO   68C
070A:  BTFSC  4B.7
070B:  GOTO   6CE
070C:  GOTO   72C
070D:  MOVLW  80
070E:  XORWF  4F,F
070F:  BTFSS  4F.7
0710:  GOTO   715
0711:  GOTO   74F
0712:  MOVF   46,W
0713:  MOVWF  4A
0714:  GOTO   722
0715:  MOVF   42,W
0716:  MOVWF  4A
0717:  MOVF   4F,F
0718:  BTFSS  03.2
0719:  GOTO   722
071A:  MOVF   4E,F
071B:  BTFSS  03.2
071C:  GOTO   722
071D:  MOVF   4D,F
071E:  BTFSS  03.2
071F:  GOTO   722
0720:  CLRF   77
0721:  GOTO   743
0722:  BTFSC  4F.7
0723:  GOTO   72C
0724:  BCF    03.0
0725:  RLF    4C,F
0726:  RLF    4D,F
0727:  RLF    4E,F
0728:  RLF    4F,F
0729:  DECFSZ 77,F
072A:  GOTO   722
072B:  GOTO   74A
072C:  BTFSS  4A.7
072D:  GOTO   730
072E:  BSF    4F.7
072F:  GOTO   743
0730:  BCF    4F.7
0731:  GOTO   743
0732:  MOVF   45,W
0733:  MOVWF  77
0734:  MOVF   46,W
0735:  MOVWF  4F
0736:  MOVF   47,W
0737:  MOVWF  4E
0738:  MOVF   48,W
0739:  MOVWF  4D
073A:  GOTO   743
073B:  MOVF   41,W
073C:  MOVWF  77
073D:  MOVF   42,W
073E:  MOVWF  4F
073F:  MOVF   43,W
0740:  MOVWF  4E
0741:  MOVF   44,W
0742:  MOVWF  4D
0743:  MOVF   4F,W
0744:  MOVWF  78
0745:  MOVF   4E,W
0746:  MOVWF  79
0747:  MOVF   4D,W
0748:  MOVWF  7A
0749:  GOTO   782
074A:  CLRF   77
074B:  CLRF   78
074C:  CLRF   79
074D:  CLRF   7A
074E:  GOTO   782
074F:  CLRF   4C
0750:  COMF   4D,F
0751:  COMF   4E,F
0752:  COMF   4F,F
0753:  COMF   4C,F
0754:  INCF   4C,F
0755:  BTFSS  03.2
0756:  GOTO   75D
0757:  INCF   4D,F
0758:  BTFSS  03.2
0759:  GOTO   75D
075A:  INCF   4E,F
075B:  BTFSC  03.2
075C:  INCF   4F,F
075D:  BTFSC  4B.0
075E:  GOTO   66B
075F:  BTFSC  4B.1
0760:  GOTO   6AD
0761:  BTFSC  4B.2
0762:  GOTO   6E3
0763:  GOTO   712
0764:  MOVF   00,W
0765:  ADDWF  4D,F
0766:  BTFSS  03.0
0767:  GOTO   76E
0768:  INCF   4E,F
0769:  BTFSS  03.2
076A:  GOTO   76E
076B:  INCF   4F,F
076C:  BTFSC  03.2
076D:  BSF    49.0
076E:  DECF   04,F
076F:  MOVF   00,W
0770:  ADDWF  4E,F
0771:  BTFSS  03.0
0772:  GOTO   776
0773:  INCF   4F,F
0774:  BTFSC  03.2
0775:  BSF    49.0
0776:  DECF   04,F
0777:  MOVF   00,W
0778:  BTFSS  00.7
0779:  XORLW  80
077A:  ADDWF  4F,F
077B:  BTFSC  03.0
077C:  BSF    49.0
077D:  BTFSC  4B.4
077E:  GOTO   672
077F:  BTFSC  4B.5
0780:  GOTO   6B4
0781:  GOTO   6EA
0782:  RETURN
0783:  MOVF   42,W
0784:  MOVWF  49
0785:  MOVF   46,W
0786:  XORWF  49,F
0787:  BTFSS  49.7
0788:  GOTO   78E
0789:  BCF    03.2
078A:  BCF    03.0
078B:  BTFSC  42.7
078C:  BSF    03.0
078D:  GOTO   7C1
078E:  MOVF   42,W
078F:  MOVWF  49
0790:  MOVF   45,W
0791:  MOVWF  4A
0792:  MOVF   41,W
0793:  SUBWF  4A,F
0794:  BTFSC  03.2
0795:  GOTO   79C
0796:  BTFSS  49.7
0797:  GOTO   7C1
0798:  MOVF   03,W
0799:  XORLW  01
079A:  MOVWF  03
079B:  GOTO   7C1
079C:  MOVF   46,W
079D:  MOVWF  4A
079E:  MOVF   42,W
079F:  SUBWF  4A,F
07A0:  BTFSC  03.2
07A1:  GOTO   7A8
07A2:  BTFSS  49.7
07A3:  GOTO   7C1
07A4:  MOVF   03,W
07A5:  XORLW  01
07A6:  MOVWF  03
07A7:  GOTO   7C1
07A8:  MOVF   47,W
07A9:  MOVWF  4A
07AA:  MOVF   43,W
07AB:  SUBWF  4A,F
07AC:  BTFSC  03.2
07AD:  GOTO   7B4
07AE:  BTFSS  49.7
07AF:  GOTO   7C1
07B0:  MOVF   03,W
07B1:  XORLW  01
07B2:  MOVWF  03
07B3:  GOTO   7C1
07B4:  MOVF   48,W
07B5:  MOVWF  4A
07B6:  MOVF   44,W
07B7:  SUBWF  4A,F
07B8:  BTFSC  03.2
07B9:  GOTO   7C0
07BA:  BTFSS  49.7
07BB:  GOTO   7C1
07BC:  MOVF   03,W
07BD:  XORLW  01
07BE:  MOVWF  03
07BF:  GOTO   7C1
07C0:  BCF    03.0
07C1:  RETURN
07C2:  MOVLW  8E
07C3:  MOVWF  77
07C4:  MOVF   61,W
07C5:  MOVWF  78
07C6:  MOVF   60,W
07C7:  MOVWF  79
07C8:  CLRF   7A
07C9:  MOVF   78,F
07CA:  BTFSS  03.2
07CB:  GOTO   7D6
07CC:  MOVF   79,W
07CD:  MOVWF  78
07CE:  CLRF   79
07CF:  MOVLW  08
07D0:  SUBWF  77,F
07D1:  MOVF   78,F
07D2:  BTFSS  03.2
07D3:  GOTO   7D6
07D4:  CLRF   77
07D5:  GOTO   7DE
07D6:  BCF    03.0
07D7:  BTFSC  78.7
07D8:  GOTO   7DD
07D9:  RLF    79,F
07DA:  RLF    78,F
07DB:  DECF   77,F
07DC:  GOTO   7D6
07DD:  BCF    78.7
07DE:  RETURN
07DF:  MOVLW  8E
07E0:  MOVWF  77
07E1:  MOVF   5E,W
07E2:  SUBWF  77,F
07E3:  MOVF   5F,W
07E4:  MOVWF  79
07E5:  MOVF   60,W
07E6:  MOVWF  78
07E7:  BSF    79.7
07E8:  MOVF   77,F
07E9:  BTFSC  03.2
07EA:  GOTO   7F6
07EB:  BCF    03.0
07EC:  MOVF   79,F
07ED:  BTFSS  03.2
07EE:  GOTO   7F2
07EF:  MOVF   78,F
07F0:  BTFSC  03.2
07F1:  GOTO   7F6
07F2:  RRF    79,F
07F3:  RRF    78,F
07F4:  DECFSZ 77,F
07F5:  GOTO   7EB
07F6:  BTFSS  5F.7
07F7:  GOTO   7FD
07F8:  COMF   78,F
07F9:  COMF   79,F
07FA:  INCF   78,F
07FB:  BTFSC  03.2
07FC:  INCF   79,F
07FD:  RETURN
*
0CB3:  CLRF   4B
0CB4:  MOVF   04,W
0CB5:  MOVWF  4A
0CB6:  BCF    4B.0
0CB7:  BTFSC  03.7
0CB8:  BSF    4B.0
0CB9:  SWAPF  44,W
0CBA:  IORLW  F0
0CBB:  MOVWF  46
0CBC:  ADDWF  46,F
0CBD:  ADDLW  E2
0CBE:  MOVWF  47
0CBF:  ADDLW  32
0CC0:  MOVWF  49
0CC1:  MOVF   44,W
0CC2:  ANDLW  0F
0CC3:  ADDWF  47,F
0CC4:  ADDWF  47,F
0CC5:  ADDWF  49,F
0CC6:  ADDLW  E9
0CC7:  MOVWF  48
0CC8:  ADDWF  48,F
0CC9:  ADDWF  48,F
0CCA:  SWAPF  43,W
0CCB:  ANDLW  0F
0CCC:  ADDWF  48,F
0CCD:  ADDWF  49,F
0CCE:  RLF    48,F
0CCF:  RLF    49,F
0CD0:  COMF   49,F
0CD1:  RLF    49,F
0CD2:  MOVF   43,W
0CD3:  ANDLW  0F
0CD4:  ADDWF  49,F
0CD5:  RLF    46,F
0CD6:  MOVLW  07
0CD7:  MOVWF  45
0CD8:  MOVLW  0A
0CD9:  ADDWF  49,F
0CDA:  DECF   48,F
0CDB:  BTFSS  03.0
0CDC:  GOTO   4D9
0CDD:  ADDWF  48,F
0CDE:  DECF   47,F
0CDF:  BTFSS  03.0
0CE0:  GOTO   4DD
0CE1:  ADDWF  47,F
0CE2:  DECF   46,F
0CE3:  BTFSS  03.0
0CE4:  GOTO   4E1
0CE5:  ADDWF  46,F
0CE6:  DECF   45,F
0CE7:  BTFSS  03.0
0CE8:  GOTO   4E5
0CE9:  MOVLW  45
0CEA:  MOVWF  04
0CEB:  BCF    03.7
0CEC:  MOVLW  07
0CED:  ANDWF  4A,W
0CEE:  BCF    4A.6
0CEF:  ADDWF  04,F
0CF0:  MOVLW  49
0CF1:  SUBWF  04,W
0CF2:  BTFSC  03.2
0CF3:  BSF    4A.6
0CF4:  MOVF   00,W
0CF5:  MOVWF  77
0CF6:  BTFSS  03.2
0CF7:  GOTO   500
0CF8:  BTFSC  4A.6
0CF9:  GOTO   500
0CFA:  BTFSC  4A.4
0CFB:  GOTO   514
0CFC:  BTFSC  4A.3
0CFD:  GOTO   500
0CFE:  MOVLW  20
0CFF:  GOTO   503
0D00:  BSF    4A.3
0D01:  BCF    4A.4
0D02:  MOVLW  30
0D03:  ADDWF  77,F
0D04:  CLRF   44
0D05:  MOVF   04,W
0D06:  MOVWF  43
0D07:  BCF    44.0
0D08:  BTFSC  03.7
0D09:  BSF    44.0
0D0A:  MOVF   77,W
0D0B:  MOVWF  60
0D0C:  BCF    0A.3
0D0D:  CALL   2E4
0D0E:  BSF    0A.3
0D0F:  MOVF   43,W
0D10:  MOVWF  04
0D11:  BCF    03.7
0D12:  BTFSC  44.0
0D13:  BSF    03.7
0D14:  INCF   04,F
0D15:  BTFSS  4A.6
0D16:  GOTO   4F0
0D17:  RETURN
*
0DDA:  MOVF   41,W
0DDB:  BTFSC  03.2
0DDC:  GOTO   69F
0DDD:  MOVWF  4D
0DDE:  MOVF   45,W
0DDF:  BTFSC  03.2
0DE0:  GOTO   69F
0DE1:  SUBWF  4D,F
0DE2:  BTFSS  03.0
0DE3:  GOTO   5E9
0DE4:  MOVLW  7F
0DE5:  ADDWF  4D,F
0DE6:  BTFSC  03.0
0DE7:  GOTO   69F
0DE8:  GOTO   5EF
0DE9:  MOVLW  81
0DEA:  SUBWF  4D,F
0DEB:  BTFSS  03.0
0DEC:  GOTO   69F
0DED:  BTFSC  03.2
0DEE:  GOTO   69F
0DEF:  MOVF   4D,W
0DF0:  MOVWF  77
0DF1:  CLRF   78
0DF2:  CLRF   79
0DF3:  CLRF   7A
0DF4:  CLRF   4C
0DF5:  MOVF   42,W
0DF6:  MOVWF  4B
0DF7:  BSF    4B.7
0DF8:  MOVF   43,W
0DF9:  MOVWF  4A
0DFA:  MOVF   44,W
0DFB:  MOVWF  49
0DFC:  MOVLW  19
0DFD:  MOVWF  4D
0DFE:  MOVF   48,W
0DFF:  SUBWF  49,F
0E00:  BTFSC  03.0
0E01:  GOTO   612
0E02:  MOVLW  01
0E03:  SUBWF  4A,F
0E04:  BTFSC  03.0
0E05:  GOTO   612
0E06:  SUBWF  4B,F
0E07:  BTFSC  03.0
0E08:  GOTO   612
0E09:  SUBWF  4C,F
0E0A:  BTFSC  03.0
0E0B:  GOTO   612
0E0C:  INCF   4C,F
0E0D:  INCF   4B,F
0E0E:  INCF   4A,F
0E0F:  MOVF   48,W
0E10:  ADDWF  49,F
0E11:  GOTO   644
0E12:  MOVF   47,W
0E13:  SUBWF  4A,F
0E14:  BTFSC  03.0
0E15:  GOTO   62D
0E16:  MOVLW  01
0E17:  SUBWF  4B,F
0E18:  BTFSC  03.0
0E19:  GOTO   62D
0E1A:  SUBWF  4C,F
0E1B:  BTFSC  03.0
0E1C:  GOTO   62D
0E1D:  INCF   4C,F
0E1E:  INCF   4B,F
0E1F:  MOVF   47,W
0E20:  ADDWF  4A,F
0E21:  MOVF   48,W
0E22:  ADDWF  49,F
0E23:  BTFSS  03.0
0E24:  GOTO   644
0E25:  INCF   4A,F
0E26:  BTFSS  03.2
0E27:  GOTO   644
0E28:  INCF   4B,F
0E29:  BTFSS  03.2
0E2A:  GOTO   644
0E2B:  INCF   4C,F
0E2C:  GOTO   644
0E2D:  MOVF   46,W
0E2E:  IORLW  80
0E2F:  SUBWF  4B,F
0E30:  BTFSC  03.0
0E31:  GOTO   643
0E32:  MOVLW  01
0E33:  SUBWF  4C,F
0E34:  BTFSC  03.0
0E35:  GOTO   643
0E36:  INCF   4C,F
0E37:  MOVF   46,W
0E38:  IORLW  80
0E39:  ADDWF  4B,F
0E3A:  MOVF   47,W
0E3B:  ADDWF  4A,F
0E3C:  BTFSS  03.0
0E3D:  GOTO   621
0E3E:  INCF   4B,F
0E3F:  BTFSS  03.2
0E40:  GOTO   621
0E41:  INCF   4C,F
0E42:  GOTO   621
0E43:  BSF    7A.0
0E44:  DECFSZ 4D,F
0E45:  GOTO   647
0E46:  GOTO   652
0E47:  BCF    03.0
0E48:  RLF    49,F
0E49:  RLF    4A,F
0E4A:  RLF    4B,F
0E4B:  RLF    4C,F
0E4C:  BCF    03.0
0E4D:  RLF    7A,F
0E4E:  RLF    79,F
0E4F:  RLF    78,F
0E50:  RLF    4E,F
0E51:  GOTO   5FE
0E52:  BTFSS  4E.0
0E53:  GOTO   65A
0E54:  BCF    03.0
0E55:  RRF    78,F
0E56:  RRF    79,F
0E57:  RRF    7A,F
0E58:  RRF    4E,F
0E59:  GOTO   65D
0E5A:  DECF   77,F
0E5B:  BTFSC  03.2
0E5C:  GOTO   69F
0E5D:  BTFSC  4E.7
0E5E:  GOTO   686
0E5F:  BCF    03.0
0E60:  RLF    49,F
0E61:  RLF    4A,F
0E62:  RLF    4B,F
0E63:  RLF    4C,F
0E64:  MOVF   48,W
0E65:  SUBWF  49,F
0E66:  BTFSC  03.0
0E67:  GOTO   672
0E68:  MOVLW  01
0E69:  SUBWF  4A,F
0E6A:  BTFSC  03.0
0E6B:  GOTO   672
0E6C:  SUBWF  4B,F
0E6D:  BTFSC  03.0
0E6E:  GOTO   672
0E6F:  SUBWF  4C,F
0E70:  BTFSS  03.0
0E71:  GOTO   695
0E72:  MOVF   47,W
0E73:  SUBWF  4A,F
0E74:  BTFSC  03.0
0E75:  GOTO   67D
0E76:  MOVLW  01
0E77:  SUBWF  4B,F
0E78:  BTFSC  03.0
0E79:  GOTO   67D
0E7A:  SUBWF  4C,F
0E7B:  BTFSS  03.0
0E7C:  GOTO   695
0E7D:  MOVF   46,W
0E7E:  IORLW  80
0E7F:  SUBWF  4B,F
0E80:  BTFSC  03.0
0E81:  GOTO   686
0E82:  MOVLW  01
0E83:  SUBWF  4C,F
0E84:  BTFSS  03.0
0E85:  GOTO   695
0E86:  INCF   7A,F
0E87:  BTFSS  03.2
0E88:  GOTO   695
0E89:  INCF   79,F
0E8A:  BTFSS  03.2
0E8B:  GOTO   695
0E8C:  INCF   78,F
0E8D:  BTFSS  03.2
0E8E:  GOTO   695
0E8F:  INCF   77,F
0E90:  BTFSC  03.2
0E91:  GOTO   69F
0E92:  RRF    78,F
0E93:  RRF    79,F
0E94:  RRF    7A,F
0E95:  MOVF   42,W
0E96:  MOVWF  4D
0E97:  MOVF   46,W
0E98:  XORWF  4D,F
0E99:  BTFSS  4D.7
0E9A:  GOTO   69D
0E9B:  BSF    78.7
0E9C:  GOTO   6A3
0E9D:  BCF    78.7
0E9E:  GOTO   6A3
0E9F:  CLRF   77
0EA0:  CLRF   78
0EA1:  CLRF   79
0EA2:  CLRF   7A
*
0EE0:  MOVF   61,W
0EE1:  XORWF  63,W
0EE2:  ANDLW  80
0EE3:  MOVWF  65
0EE4:  BTFSS  61.7
0EE5:  GOTO   6EB
0EE6:  COMF   60,F
0EE7:  COMF   61,F
0EE8:  INCF   60,F
0EE9:  BTFSC  03.2
0EEA:  INCF   61,F
0EEB:  BTFSS  63.7
0EEC:  GOTO   6F2
0EED:  COMF   62,F
0EEE:  COMF   63,F
0EEF:  INCF   62,F
0EF0:  BTFSC  03.2
0EF1:  INCF   63,F
0EF2:  CLRF   78
0EF3:  CLRF   79
0EF4:  CLRF   77
0EF5:  CLRF   7A
0EF6:  MOVF   63,W
0EF7:  BTFSS  03.2
0EF8:  GOTO   6FC
0EF9:  MOVF   62,W
0EFA:  BTFSC  03.2
0EFB:  GOTO   716
0EFC:  MOVLW  10
0EFD:  MOVWF  64
0EFE:  BCF    03.0
0EFF:  RLF    60,F
0F00:  RLF    61,F
0F01:  RLF    77,F
0F02:  RLF    7A,F
0F03:  MOVF   63,W
0F04:  SUBWF  7A,W
0F05:  BTFSS  03.2
0F06:  GOTO   709
0F07:  MOVF   62,W
0F08:  SUBWF  77,W
0F09:  BTFSS  03.0
0F0A:  GOTO   712
0F0B:  MOVF   62,W
0F0C:  SUBWF  77,F
0F0D:  BTFSS  03.0
0F0E:  DECF   7A,F
0F0F:  MOVF   63,W
0F10:  SUBWF  7A,F
0F11:  BSF    03.0
0F12:  RLF    78,F
0F13:  RLF    79,F
0F14:  DECFSZ 64,F
0F15:  GOTO   6FE
0F16:  BTFSS  65.7
0F17:  GOTO   71D
0F18:  COMF   78,F
0F19:  COMF   79,F
0F1A:  INCF   78,F
0F1B:  BTFSC  03.2
0F1C:  INCF   79,F
0F1D:  RETURN
0F1E:  MOVF   00,F
0F1F:  BTFSC  03.2
0F20:  GOTO   735
0F21:  CLRF   5F
0F22:  MOVF   04,W
0F23:  MOVWF  5E
0F24:  BCF    5F.0
0F25:  BTFSC  03.7
0F26:  BSF    5F.0
0F27:  MOVF   00,W
0F28:  MOVWF  60
0F29:  BCF    0A.3
0F2A:  CALL   2E4
0F2B:  BSF    0A.3
0F2C:  MOVF   5E,W
0F2D:  MOVWF  04
0F2E:  BCF    03.7
0F2F:  BTFSC  5F.0
0F30:  BSF    03.7
0F31:  INCF   04,F
0F32:  BTFSC  03.2
0F33:  INCF   05,F
0F34:  GOTO   71E
0F35:  RETURN
*
0F77:  MOVLW  10
0F78:  MOVWF  4B
0F79:  CLRF   77
0F7A:  CLRF   7A
0F7B:  RRF    48,F
0F7C:  RRF    47,F
0F7D:  BTFSS  03.0
0F7E:  GOTO   785
0F7F:  MOVF   49,W
0F80:  ADDWF  77,F
0F81:  BTFSC  03.0
0F82:  INCF   7A,F
0F83:  MOVF   4A,W
0F84:  ADDWF  7A,F
0F85:  RRF    7A,F
0F86:  RRF    77,F
0F87:  RRF    79,F
0F88:  RRF    78,F
0F89:  DECFSZ 4B,F
0F8A:  GOTO   77B
*
0F97:  CLRF   78
0F98:  CLRF   79
0F99:  CLRF   77
0F9A:  CLRF   7A
0F9B:  MOVF   4C,W
0F9C:  BTFSS  03.2
0F9D:  GOTO   7A1
0F9E:  MOVF   4B,W
0F9F:  BTFSC  03.2
0FA0:  GOTO   7BB
0FA1:  MOVLW  10
0FA2:  MOVWF  4D
0FA3:  BCF    03.0
0FA4:  RLF    49,F
0FA5:  RLF    4A,F
0FA6:  RLF    77,F
0FA7:  RLF    7A,F
0FA8:  MOVF   4C,W
0FA9:  SUBWF  7A,W
0FAA:  BTFSS  03.2
0FAB:  GOTO   7AE
0FAC:  MOVF   4B,W
0FAD:  SUBWF  77,W
0FAE:  BTFSS  03.0
0FAF:  GOTO   7B7
0FB0:  MOVF   4B,W
0FB1:  SUBWF  77,F
0FB2:  BTFSS  03.0
0FB3:  DECF   7A,F
0FB4:  MOVF   4C,W
0FB5:  SUBWF  7A,F
0FB6:  BSF    03.0
0FB7:  RLF    78,F
0FB8:  RLF    79,F
0FB9:  DECFSZ 4D,F
0FBA:  GOTO   7A3
*
11F8:  MOVF   0B,W
11F9:  MOVWF  41
11FA:  BCF    0B.7
11FB:  BSF    03.5
11FC:  BSF    03.6
11FD:  BSF    0C.7
11FE:  BSF    0C.0
11FF:  NOP
1200:  NOP
1201:  BCF    03.5
1202:  BCF    03.6
1203:  BTFSC  41.7
1204:  BSF    0B.7
1205:  BSF    03.6
1206:  MOVF   0C,W
1207:  ANDLW  7F
1208:  BTFSC  03.2
1209:  GOTO   24E
120A:  BCF    03.6
120B:  MOVWF  41
120C:  BSF    03.6
120D:  MOVF   0D,W
120E:  BCF    03.6
120F:  MOVWF  42
1210:  BSF    03.6
1211:  MOVF   0F,W
1212:  BCF    03.6
1213:  MOVWF  43
1214:  MOVF   41,W
1215:  BTFSS  0C.4
1216:  GOTO   215
1217:  MOVWF  19
1218:  MOVF   42,W
1219:  BSF    03.6
121A:  MOVWF  0D
121B:  BCF    03.6
121C:  MOVF   43,W
121D:  BSF    03.6
121E:  MOVWF  0F
121F:  BCF    03.6
1220:  MOVF   0B,W
1221:  MOVWF  44
1222:  BCF    0B.7
1223:  BSF    03.5
1224:  BSF    03.6
1225:  BSF    0C.7
1226:  BSF    0C.0
1227:  NOP
1228:  NOP
1229:  BCF    03.5
122A:  BCF    03.6
122B:  BTFSC  44.7
122C:  BSF    0B.7
122D:  BSF    03.6
122E:  RLF    0C,W
122F:  RLF    0E,W
1230:  ANDLW  7F
1231:  BTFSC  03.2
1232:  GOTO   24E
1233:  BCF    03.6
1234:  MOVWF  41
1235:  BSF    03.6
1236:  MOVF   0D,W
1237:  BCF    03.6
1238:  MOVWF  42
1239:  BSF    03.6
123A:  MOVF   0F,W
123B:  BCF    03.6
123C:  MOVWF  43
123D:  MOVF   41,W
123E:  BTFSS  0C.4
123F:  GOTO   23E
1240:  MOVWF  19
1241:  MOVF   42,W
1242:  BSF    03.6
1243:  MOVWF  0D
1244:  BCF    03.6
1245:  MOVF   43,W
1246:  BSF    03.6
1247:  MOVWF  0F
1248:  INCF   0D,F
1249:  BTFSC  03.2
124A:  INCF   0F,F
124B:  BCF    03.6
124C:  GOTO   1F8
124D:  BSF    03.6
124E:  BCF    03.6
124F:  RETURN
....................  
.................... #list 
....................  
.................... #device adc=10 
.................... #use delay (clock=4000000) 
*
01C1:  MOVLW  63
01C2:  MOVWF  04
01C3:  BCF    03.7
01C4:  MOVF   00,W
01C5:  BTFSC  03.2
01C6:  GOTO   1D5
01C7:  MOVLW  01
01C8:  MOVWF  78
01C9:  CLRF   77
01CA:  DECFSZ 77,F
01CB:  GOTO   1CA
01CC:  DECFSZ 78,F
01CD:  GOTO   1C9
01CE:  MOVLW  4A
01CF:  MOVWF  77
01D0:  DECFSZ 77,F
01D1:  GOTO   1D0
01D2:  GOTO   1D3
01D3:  DECFSZ 00,F
01D4:  GOTO   1C7
01D5:  RETURN
.................... #FUSES NOWDT                  
.................... #FUSES xt                    
.................... #FUSES NOPROTECT              
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
*
023A:  BSF    06.4
....................    output_float(LCD_DATA5); 
023B:  BSF    06.5
....................    output_float(LCD_DATA6); 
023C:  BSF    06.6
....................    output_float(LCD_DATA7); 
023D:  BSF    06.7
....................   #else 
....................    lcdtris.data = 0xF; 
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
023E:  BCF    03.5
023F:  BSF    06.2
0240:  BSF    03.5
0241:  BCF    06.2
....................    delay_cycles(1); 
0242:  NOP
....................    lcd_output_enable(1); 
0243:  BCF    03.5
0244:  BSF    06.3
0245:  BSF    03.5
0246:  BCF    06.3
....................    delay_cycles(1); 
0247:  NOP
....................    high = lcd_read_nibble(); 
0248:  BCF    03.5
0249:  CALL   201
024A:  MOVF   78,W
024B:  MOVWF  68
....................        
....................    lcd_output_enable(0); 
024C:  BCF    06.3
024D:  BSF    03.5
024E:  BCF    06.3
....................    delay_cycles(1); 
024F:  NOP
....................    lcd_output_enable(1); 
0250:  BCF    03.5
0251:  BSF    06.3
0252:  BSF    03.5
0253:  BCF    06.3
....................    delay_us(1); 
0254:  NOP
....................    low = lcd_read_nibble(); 
0255:  BCF    03.5
0256:  CALL   201
0257:  MOVF   78,W
0258:  MOVWF  67
....................        
....................    lcd_output_enable(0); 
0259:  BCF    06.3
025A:  BSF    03.5
025B:  BCF    06.3
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
025C:  BCF    06.4
....................    output_drive(LCD_DATA5); 
025D:  BCF    06.5
....................    output_drive(LCD_DATA6); 
025E:  BCF    06.6
....................    output_drive(LCD_DATA7); 
025F:  BCF    06.7
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
0260:  BCF    03.5
0261:  SWAPF  68,W
0262:  MOVWF  77
0263:  MOVLW  F0
0264:  ANDWF  77,F
0265:  MOVF   77,W
0266:  IORWF  67,W
0267:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
*
0201:  CLRF   69
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
0202:  BSF    03.5
0203:  BSF    06.4
0204:  MOVLW  00
0205:  BCF    03.5
0206:  BTFSC  06.4
0207:  MOVLW  01
0208:  IORWF  69,F
....................    n |= input(LCD_DATA5) << 1; 
0209:  BSF    03.5
020A:  BSF    06.5
020B:  MOVLW  00
020C:  BCF    03.5
020D:  BTFSC  06.5
020E:  MOVLW  01
020F:  MOVWF  77
0210:  BCF    03.0
0211:  RLF    77,F
0212:  MOVF   77,W
0213:  IORWF  69,F
....................    n |= input(LCD_DATA6) << 2; 
0214:  BSF    03.5
0215:  BSF    06.6
0216:  MOVLW  00
0217:  BCF    03.5
0218:  BTFSC  06.6
0219:  MOVLW  01
021A:  MOVWF  77
021B:  RLF    77,F
021C:  RLF    77,F
021D:  MOVLW  FC
021E:  ANDWF  77,F
021F:  MOVF   77,W
0220:  IORWF  69,F
....................    n |= input(LCD_DATA7) << 3; 
0221:  BSF    03.5
0222:  BSF    06.7
0223:  MOVLW  00
0224:  BCF    03.5
0225:  BTFSC  06.7
0226:  MOVLW  01
0227:  MOVWF  77
0228:  RLF    77,F
0229:  RLF    77,F
022A:  RLF    77,F
022B:  MOVLW  F8
022C:  ANDWF  77,F
022D:  MOVF   77,W
022E:  IORWF  69,F
....................     
....................    return(n); 
022F:  MOVF   69,W
0230:  MOVWF  78
....................   #else 
0231:  RETURN
....................    return(lcd.data); 
....................   #endif 
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
*
01D6:  BTFSC  68.0
01D7:  GOTO   1DA
01D8:  BCF    06.4
01D9:  GOTO   1DB
01DA:  BSF    06.4
01DB:  BSF    03.5
01DC:  BCF    06.4
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
01DD:  BCF    03.5
01DE:  BTFSC  68.1
01DF:  GOTO   1E2
01E0:  BCF    06.5
01E1:  GOTO   1E3
01E2:  BSF    06.5
01E3:  BSF    03.5
01E4:  BCF    06.5
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
01E5:  BCF    03.5
01E6:  BTFSC  68.2
01E7:  GOTO   1EA
01E8:  BCF    06.6
01E9:  GOTO   1EB
01EA:  BSF    06.6
01EB:  BSF    03.5
01EC:  BCF    06.6
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
01ED:  BCF    03.5
01EE:  BTFSC  68.3
01EF:  GOTO   1F2
01F0:  BCF    06.7
01F1:  GOTO   1F3
01F2:  BSF    06.7
01F3:  BSF    03.5
01F4:  BCF    06.7
....................   #else       
....................    lcdlat.data = n; 
....................   #endif 
....................        
....................    delay_cycles(1); 
01F5:  NOP
....................    lcd_output_enable(1); 
01F6:  BCF    03.5
01F7:  BSF    06.3
01F8:  BSF    03.5
01F9:  BCF    06.3
....................    delay_us(2); 
01FA:  GOTO   1FB
....................    lcd_output_enable(0); 
01FB:  BCF    03.5
01FC:  BCF    06.3
01FD:  BSF    03.5
01FE:  BCF    06.3
01FF:  BCF    03.5
0200:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
0232:  BSF    03.5
0233:  BCF    06.3
....................    lcd_rs_tris(); 
0234:  BCF    06.1
....................    lcd_rw_tris(); 
0235:  BCF    06.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
0236:  BCF    03.5
0237:  BCF    06.1
0238:  BSF    03.5
0239:  BCF    06.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
0268:  MOVF   78,W
0269:  MOVWF  67
026A:  BTFSS  67.7
026B:  GOTO   26E
026C:  BSF    03.5
026D:  GOTO   23A
....................    lcd_output_rs(address); 
026E:  MOVF   65,F
026F:  BTFSS  03.2
0270:  GOTO   273
0271:  BCF    06.1
0272:  GOTO   274
0273:  BSF    06.1
0274:  BSF    03.5
0275:  BCF    06.1
....................    delay_cycles(1); 
0276:  NOP
....................    lcd_output_rw(0); 
0277:  BCF    03.5
0278:  BCF    06.2
0279:  BSF    03.5
027A:  BCF    06.2
....................    delay_cycles(1); 
027B:  NOP
....................    lcd_output_enable(0); 
027C:  BCF    03.5
027D:  BCF    06.3
027E:  BSF    03.5
027F:  BCF    06.3
....................    lcd_send_nibble(n >> 4); 
0280:  BCF    03.5
0281:  SWAPF  66,W
0282:  MOVWF  67
0283:  MOVLW  0F
0284:  ANDWF  67,F
0285:  MOVF   67,W
0286:  MOVWF  68
0287:  CALL   1D6
....................    lcd_send_nibble(n & 0xf); 
0288:  MOVF   66,W
0289:  ANDLW  0F
028A:  MOVWF  67
028B:  MOVWF  68
028C:  CALL   1D6
028D:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
028E:  MOVLW  28
028F:  MOVWF  5F
0290:  MOVLW  0C
0291:  MOVWF  60
0292:  MOVLW  01
0293:  MOVWF  61
0294:  MOVLW  06
0295:  MOVWF  62
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
0296:  BCF    06.3
0297:  BSF    03.5
0298:  BCF    06.3
....................    lcd_output_rs(0); 
0299:  BCF    03.5
029A:  BCF    06.1
029B:  BSF    03.5
029C:  BCF    06.1
....................    lcd_output_rw(0); 
029D:  BCF    03.5
029E:  BCF    06.2
029F:  BSF    03.5
02A0:  BCF    06.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
02A1:  BCF    06.4
....................    output_drive(LCD_DATA5); 
02A2:  BCF    06.5
....................    output_drive(LCD_DATA6); 
02A3:  BCF    06.6
....................    output_drive(LCD_DATA7); 
02A4:  BCF    06.7
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................    lcd_enable_tris(); 
02A5:  BCF    06.3
....................    lcd_rs_tris(); 
02A6:  BCF    06.1
....................    lcd_rw_tris(); 
02A7:  BCF    06.2
....................  #endif 
....................      
....................    delay_ms(15); 
02A8:  MOVLW  0F
02A9:  BCF    03.5
02AA:  MOVWF  63
02AB:  CALL   1C1
....................    for(i=1;i<=3;++i) 
02AC:  MOVLW  01
02AD:  MOVWF  5E
02AE:  MOVF   5E,W
02AF:  SUBLW  03
02B0:  BTFSS  03.0
02B1:  GOTO   2BA
....................    { 
....................        lcd_send_nibble(3); 
02B2:  MOVLW  03
02B3:  MOVWF  68
02B4:  CALL   1D6
....................        delay_ms(5); 
02B5:  MOVLW  05
02B6:  MOVWF  63
02B7:  CALL   1C1
02B8:  INCF   5E,F
02B9:  GOTO   2AE
....................    } 
....................     
....................    lcd_send_nibble(2); 
02BA:  MOVLW  02
02BB:  MOVWF  68
02BC:  CALL   1D6
....................    delay_ms(5); 
02BD:  MOVLW  05
02BE:  MOVWF  63
02BF:  CALL   1C1
....................    for(i=0;i<=3;++i) 
02C0:  CLRF   5E
02C1:  MOVF   5E,W
02C2:  SUBLW  03
02C3:  BTFSS  03.0
02C4:  GOTO   2D1
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
02C5:  MOVLW  5F
02C6:  ADDWF  5E,W
02C7:  MOVWF  04
02C8:  BCF    03.7
02C9:  MOVF   00,W
02CA:  MOVWF  63
02CB:  CLRF   65
02CC:  MOVF   63,W
02CD:  MOVWF  66
02CE:  CALL   232
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
02CF:  INCF   5E,F
02D0:  GOTO   2C1
02D1:  RETURN
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
02D2:  DECFSZ 62,W
02D3:  GOTO   2D5
02D4:  GOTO   2D8
....................       address=LCD_LINE_TWO; 
02D5:  MOVLW  40
02D6:  MOVWF  63
02D7:  GOTO   2D9
....................    else 
....................       address=0; 
02D8:  CLRF   63
....................       
....................    address+=x-1; 
02D9:  MOVLW  01
02DA:  SUBWF  61,W
02DB:  ADDWF  63,F
....................    lcd_send_byte(0,0x80|address); 
02DC:  MOVF   63,W
02DD:  IORLW  80
02DE:  MOVWF  64
02DF:  CLRF   65
02E0:  MOVF   64,W
02E1:  MOVWF  66
02E2:  CALL   232
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
02E3:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
02E4:  MOVF   60,W
02E5:  XORLW  07
02E6:  BTFSC  03.2
02E7:  GOTO   2F2
02E8:  XORLW  0B
02E9:  BTFSC  03.2
02EA:  GOTO   2F7
02EB:  XORLW  06
02EC:  BTFSC  03.2
02ED:  GOTO   2FF
02EE:  XORLW  02
02EF:  BTFSC  03.2
02F0:  GOTO   305
02F1:  GOTO   30A
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
02F2:  MOVLW  01
02F3:  MOVWF  61
02F4:  MOVWF  62
02F5:  CALL   2D2
02F6:  GOTO   30F
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
02F7:  CLRF   65
02F8:  MOVLW  01
02F9:  MOVWF  66
02FA:  CALL   232
....................                      delay_ms(2); 
02FB:  MOVLW  02
02FC:  MOVWF  63
02FD:  CALL   1C1
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
02FE:  GOTO   30F
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
02FF:  MOVLW  01
0300:  MOVWF  61
0301:  MOVLW  02
0302:  MOVWF  62
0303:  CALL   2D2
0304:  GOTO   30F
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
0305:  CLRF   65
0306:  MOVLW  10
0307:  MOVWF  66
0308:  CALL   232
0309:  GOTO   30F
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
030A:  MOVLW  01
030B:  MOVWF  65
030C:  MOVF   60,W
030D:  MOVWF  66
030E:  CALL   232
....................      #endif 
....................    } 
030F:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
.................... float pwm=500; 
.................... unsigned int8 speed_; 
.................... char num='@';// char n[12]={'1' ,'2', '3', '4', '5', '6', '7', '8', '9', '*', '0', '#'};  
.................... int t=50,flag_key; //for key function 
.................... int start =0,seg=0,to_zero=0,no_time=0,with_time=0,change_speed=0; //for motor function 
.................... int8 check; // for ultra sonic 
.................... unsigned int16 i, distance; //ultra sonic 
.................... int16 t1; //for encoder  
....................  
.................... # int_timer1     // example for timer1 as counter from external pulses 
.................... void t1_isr(){ 
.................... t1++; 
*
0051:  INCF   3E,F
0052:  BTFSC  03.2
0053:  INCF   3F,F
.................... set_timer1(65535); // one puls it will be t1 increase 
0054:  CLRF   0E
0055:  MOVLW  FF
0056:  MOVWF  0F
0057:  MOVWF  0E
0058:  BCF    0C.0
0059:  BCF    0A.3
005A:  BCF    0A.4
005B:  GOTO   02D
.................... } 
....................  
....................  
.................... void  key(){ // in this func the code will inter in inf loop until user enter char 
.................... flag_key=0;  
*
0366:  CLRF   32
.................... while(!flag_key){ 
0367:  MOVF   32,F
0368:  BTFSS  03.2
0369:  GOTO   446
.................... for(int i=0;i<4;i++){ 
036A:  CLRF   41
036B:  MOVF   41,W
036C:  SUBLW  03
036D:  BTFSS  03.0
036E:  GOTO   445
....................  
.................... if(i==0){ 
036F:  MOVF   41,F
0370:  BTFSS  03.2
0371:  GOTO   3A4
.................... output_high(pin_d1); 
0372:  BSF    03.5
0373:  BCF    08.1
0374:  BCF    03.5
0375:  BSF    08.1
....................     if( input(pin_d5)){num='1'; flag_key=1;delay_ms(t);} 
0376:  BSF    03.5
0377:  BSF    08.5
0378:  BCF    03.5
0379:  BTFSS  08.5
037A:  GOTO   383
037B:  MOVLW  31
037C:  MOVWF  30
037D:  MOVLW  01
037E:  MOVWF  32
037F:  MOVF   31,W
0380:  MOVWF  63
0381:  CALL   1C1
0382:  GOTO   39C
.................... else if( input(pin_d6)){num='2';flag_key=1;delay_ms(t);} 
0383:  BSF    03.5
0384:  BSF    08.6
0385:  BCF    03.5
0386:  BTFSS  08.6
0387:  GOTO   390
0388:  MOVLW  32
0389:  MOVWF  30
038A:  MOVLW  01
038B:  MOVWF  32
038C:  MOVF   31,W
038D:  MOVWF  63
038E:  CALL   1C1
038F:  GOTO   39C
.................... else if( input(pin_d7)) {num='3';flag_key=1;delay_ms(t);} 
0390:  BSF    03.5
0391:  BSF    08.7
0392:  BCF    03.5
0393:  BTFSS  08.7
0394:  GOTO   39C
0395:  MOVLW  33
0396:  MOVWF  30
0397:  MOVLW  01
0398:  MOVWF  32
0399:  MOVF   31,W
039A:  MOVWF  63
039B:  CALL   1C1
.................... delay_ms(t); 
039C:  MOVF   31,W
039D:  MOVWF  63
039E:  CALL   1C1
.................... output_low(pin_d1); 
039F:  BSF    03.5
03A0:  BCF    08.1
03A1:  BCF    03.5
03A2:  BCF    08.1
.................... } 
03A3:  GOTO   443
....................  
.................... else if(i==1){ 
03A4:  DECFSZ 41,W
03A5:  GOTO   3D8
.................... output_high(pin_d2); 
03A6:  BSF    03.5
03A7:  BCF    08.2
03A8:  BCF    03.5
03A9:  BSF    08.2
....................  if(input(pin_d5)) {num='4';flag_key=1;delay_ms(t);} 
03AA:  BSF    03.5
03AB:  BSF    08.5
03AC:  BCF    03.5
03AD:  BTFSS  08.5
03AE:  GOTO   3B7
03AF:  MOVLW  34
03B0:  MOVWF  30
03B1:  MOVLW  01
03B2:  MOVWF  32
03B3:  MOVF   31,W
03B4:  MOVWF  63
03B5:  CALL   1C1
03B6:  GOTO   3D0
.................... else if( input(pin_d6)) {num='5';flag_key=1;delay_ms(t);} 
03B7:  BSF    03.5
03B8:  BSF    08.6
03B9:  BCF    03.5
03BA:  BTFSS  08.6
03BB:  GOTO   3C4
03BC:  MOVLW  35
03BD:  MOVWF  30
03BE:  MOVLW  01
03BF:  MOVWF  32
03C0:  MOVF   31,W
03C1:  MOVWF  63
03C2:  CALL   1C1
03C3:  GOTO   3D0
.................... else if( input(pin_d7)) {num='6';flag_key=1;delay_ms(t);} 
03C4:  BSF    03.5
03C5:  BSF    08.7
03C6:  BCF    03.5
03C7:  BTFSS  08.7
03C8:  GOTO   3D0
03C9:  MOVLW  36
03CA:  MOVWF  30
03CB:  MOVLW  01
03CC:  MOVWF  32
03CD:  MOVF   31,W
03CE:  MOVWF  63
03CF:  CALL   1C1
.................... delay_ms(t); 
03D0:  MOVF   31,W
03D1:  MOVWF  63
03D2:  CALL   1C1
.................... output_low(pin_d2);} 
03D3:  BSF    03.5
03D4:  BCF    08.2
03D5:  BCF    03.5
03D6:  BCF    08.2
03D7:  GOTO   443
....................  
.................... else if(i==2){ 
03D8:  MOVF   41,W
03D9:  SUBLW  02
03DA:  BTFSS  03.2
03DB:  GOTO   40E
.................... output_high(pin_d3); 
03DC:  BSF    03.5
03DD:  BCF    08.3
03DE:  BCF    03.5
03DF:  BSF    08.3
....................  if(input(pin_d5)) {num= '7';flag_key=1;delay_ms(t);} 
03E0:  BSF    03.5
03E1:  BSF    08.5
03E2:  BCF    03.5
03E3:  BTFSS  08.5
03E4:  GOTO   3ED
03E5:  MOVLW  37
03E6:  MOVWF  30
03E7:  MOVLW  01
03E8:  MOVWF  32
03E9:  MOVF   31,W
03EA:  MOVWF  63
03EB:  CALL   1C1
03EC:  GOTO   406
.................... else if( input(pin_d6)) {num= '8';flag_key=1;delay_ms(t);} 
03ED:  BSF    03.5
03EE:  BSF    08.6
03EF:  BCF    03.5
03F0:  BTFSS  08.6
03F1:  GOTO   3FA
03F2:  MOVLW  38
03F3:  MOVWF  30
03F4:  MOVLW  01
03F5:  MOVWF  32
03F6:  MOVF   31,W
03F7:  MOVWF  63
03F8:  CALL   1C1
03F9:  GOTO   406
.................... else if( input(pin_d7)) {num= '9';flag_key=1;delay_ms(t);} 
03FA:  BSF    03.5
03FB:  BSF    08.7
03FC:  BCF    03.5
03FD:  BTFSS  08.7
03FE:  GOTO   406
03FF:  MOVLW  39
0400:  MOVWF  30
0401:  MOVLW  01
0402:  MOVWF  32
0403:  MOVF   31,W
0404:  MOVWF  63
0405:  CALL   1C1
.................... delay_ms(t); 
0406:  MOVF   31,W
0407:  MOVWF  63
0408:  CALL   1C1
.................... output_low(pin_d3);} 
0409:  BSF    03.5
040A:  BCF    08.3
040B:  BCF    03.5
040C:  BCF    08.3
040D:  GOTO   443
.................... else if(i==3){ 
040E:  MOVF   41,W
040F:  SUBLW  03
0410:  BTFSS  03.2
0411:  GOTO   443
.................... output_high(pin_d4); 
0412:  BSF    03.5
0413:  BCF    08.4
0414:  BCF    03.5
0415:  BSF    08.4
....................  if(input(pin_d5)) {num= '*';flag_key=1;delay_ms(t);} 
0416:  BSF    03.5
0417:  BSF    08.5
0418:  BCF    03.5
0419:  BTFSS  08.5
041A:  GOTO   423
041B:  MOVLW  2A
041C:  MOVWF  30
041D:  MOVLW  01
041E:  MOVWF  32
041F:  MOVF   31,W
0420:  MOVWF  63
0421:  CALL   1C1
0422:  GOTO   43C
.................... else if( input(pin_d6)) {num= '0';flag_key=1;delay_ms(t);} 
0423:  BSF    03.5
0424:  BSF    08.6
0425:  BCF    03.5
0426:  BTFSS  08.6
0427:  GOTO   430
0428:  MOVLW  30
0429:  MOVWF  30
042A:  MOVLW  01
042B:  MOVWF  32
042C:  MOVF   31,W
042D:  MOVWF  63
042E:  CALL   1C1
042F:  GOTO   43C
.................... else if( input(pin_d7)) {num= '#';flag_key=1;delay_ms(t);} 
0430:  BSF    03.5
0431:  BSF    08.7
0432:  BCF    03.5
0433:  BTFSS  08.7
0434:  GOTO   43C
0435:  MOVLW  23
0436:  MOVWF  30
0437:  MOVLW  01
0438:  MOVWF  32
0439:  MOVF   31,W
043A:  MOVWF  63
043B:  CALL   1C1
.................... delay_ms(t); 
043C:  MOVF   31,W
043D:  MOVWF  63
043E:  CALL   1C1
.................... output_low(pin_d4);} 
043F:  BSF    03.5
0440:  BCF    08.4
0441:  BCF    03.5
0442:  BCF    08.4
0443:  INCF   41,F
0444:  GOTO   36B
.................... } }} 
0445:  GOTO   367
0446:  RETURN
....................  
....................  
.................... void ultra_sonick(){ 
.................... #use fast_io(A) 
....................   set_tris_a(0x02);                                    
*
0D18:  MOVLW  02
0D19:  BSF    03.5
0D1A:  MOVWF  05
....................   setup_timer_1 (T1_INTERNAL | T1_DIV_BY_2);       // Configure Timer1 module 
0D1B:  MOVLW  95
0D1C:  BCF    03.5
0D1D:  MOVWF  10
....................   set_timer1(0);                                   // Reset Timer1 
0D1E:  CLRF   0E
0D1F:  CLRF   0F
0D20:  CLRF   0E
....................   lcd_putc('\f');                                  // LCD Clear 
0D21:  MOVLW  0C
0D22:  MOVWF  60
0D23:  BCF    0A.3
0D24:  CALL   2E4
0D25:  BSF    0A.3
....................   lcd_gotoxy(4, 1);                                // Go to column 4 row 1 
0D26:  MOVLW  04
0D27:  MOVWF  61
0D28:  MOVLW  01
0D29:  MOVWF  62
0D2A:  BCF    0A.3
0D2B:  CALL   2D2
0D2C:  BSF    0A.3
....................   lcd_putc("Distance:"); 
0D2D:  MOVLW  5C
0D2E:  BSF    03.6
0D2F:  MOVWF  0D
0D30:  MOVLW  00
0D31:  MOVWF  0F
0D32:  BCF    0A.3
0D33:  BCF    03.6
0D34:  CALL   310
0D35:  BSF    0A.3
....................   while(TRUE){ 
....................     check = 0; 
0D36:  CLRF   39
....................     i = 0; 
0D37:  CLRF   3B
0D38:  CLRF   3A
....................     output_high(PIN_A0); 
0D39:  BSF    05.0
....................     delay_us(10); 
0D3A:  MOVLW  02
0D3B:  MOVWF  77
0D3C:  DECFSZ 77,F
0D3D:  GOTO   53C
0D3E:  GOTO   53F
0D3F:  NOP
....................     output_low(PIN_A0); 
0D40:  BCF    05.0
....................     set_timer1(0);                                 // Reset Timer1 
0D41:  CLRF   0E
0D42:  CLRF   0F
0D43:  CLRF   0E
....................     while(!input(PIN_A1) && (get_timer1() < 1000)); 
0D44:  BTFSC  05.1
0D45:  GOTO   55C
0D46:  MOVF   0F,W
0D47:  MOVWF  7A
0D48:  MOVF   0E,W
0D49:  MOVWF  77
0D4A:  MOVF   0F,W
0D4B:  SUBWF  7A,W
0D4C:  BTFSS  03.2
0D4D:  GOTO   546
0D4E:  MOVF   77,W
0D4F:  MOVWF  41
0D50:  MOVF   7A,W
0D51:  MOVWF  42
0D52:  MOVF   42,W
0D53:  SUBLW  03
0D54:  BTFSS  03.0
0D55:  GOTO   55C
0D56:  BTFSS  03.2
0D57:  GOTO   544
0D58:  MOVF   41,W
0D59:  SUBLW  E7
0D5A:  BTFSC  03.0
0D5B:  GOTO   544
....................     if(get_timer1() > 990) 
0D5C:  MOVF   0F,W
0D5D:  MOVWF  7A
0D5E:  MOVF   0E,W
0D5F:  MOVWF  77
0D60:  MOVF   0F,W
0D61:  SUBWF  7A,W
0D62:  BTFSS  03.2
0D63:  GOTO   55C
0D64:  MOVF   77,W
0D65:  MOVWF  41
0D66:  MOVF   7A,W
0D67:  MOVWF  42
0D68:  MOVF   42,W
0D69:  SUBLW  02
0D6A:  BTFSC  03.0
0D6B:  GOTO   575
0D6C:  XORLW  FF
0D6D:  BTFSS  03.2
0D6E:  GOTO   573
0D6F:  MOVF   41,W
0D70:  SUBLW  DE
0D71:  BTFSC  03.0
0D72:  GOTO   575
....................       check = 1;                                   // Timeout error 
0D73:  MOVLW  01
0D74:  MOVWF  39
....................     set_timer1(0);                                 // Reset Timer1 
0D75:  CLRF   0E
0D76:  CLRF   0F
0D77:  CLRF   0E
....................     while(input(PIN_A1) && (i < 25000)) 
0D78:  BTFSS  05.1
0D79:  GOTO   591
0D7A:  MOVF   3B,W
0D7B:  SUBLW  61
0D7C:  BTFSS  03.0
0D7D:  GOTO   591
0D7E:  BTFSS  03.2
0D7F:  GOTO   584
0D80:  MOVF   3A,W
0D81:  SUBLW  A7
0D82:  BTFSS  03.0
0D83:  GOTO   591
....................       i = get_timer1();                            // Store Timer1 value in i  
0D84:  MOVF   0F,W
0D85:  MOVWF  7A
0D86:  MOVF   0E,W
0D87:  MOVWF  77
0D88:  MOVF   0F,W
0D89:  SUBWF  7A,W
0D8A:  BTFSS  03.2
0D8B:  GOTO   584
0D8C:  MOVF   77,W
0D8D:  MOVWF  3A
0D8E:  MOVF   7A,W
0D8F:  MOVWF  3B
0D90:  GOTO   578
....................     if(i > 24990)                                  // Out of range error 
0D91:  MOVF   3B,W
0D92:  SUBLW  60
0D93:  BTFSC  03.0
0D94:  GOTO   59E
0D95:  XORLW  FF
0D96:  BTFSS  03.2
0D97:  GOTO   59C
0D98:  MOVF   3A,W
0D99:  SUBLW  9E
0D9A:  BTFSC  03.0
0D9B:  GOTO   59E
....................       check = 2; 
0D9C:  MOVLW  02
0D9D:  MOVWF  39
....................     if(check == 1){ 
0D9E:  DECFSZ 39,W
0D9F:  GOTO   5B0
....................       lcd_gotoxy(3, 2);                            // Go to column 3 row 2 
0DA0:  MOVLW  03
0DA1:  MOVWF  61
0DA2:  MOVLW  02
0DA3:  MOVWF  62
0DA4:  BCF    0A.3
0DA5:  CALL   2D2
0DA6:  BSF    0A.3
....................       lcd_putc("  Time Out  "); 
0DA7:  MOVLW  61
0DA8:  BSF    03.6
0DA9:  MOVWF  0D
0DAA:  MOVLW  00
0DAB:  MOVWF  0F
0DAC:  BCF    0A.3
0DAD:  BCF    03.6
0DAE:  CALL   310
0DAF:  BSF    0A.3
....................     } 
....................     if(check == 2){ 
0DB0:  MOVF   39,W
0DB1:  SUBLW  02
0DB2:  BTFSS  03.2
0DB3:  GOTO   5C5
....................       lcd_gotoxy(3, 2);                            // Go to column 3 row 2 
0DB4:  MOVLW  03
0DB5:  MOVWF  61
0DB6:  MOVLW  02
0DB7:  MOVWF  62
0DB8:  BCF    0A.3
0DB9:  CALL   2D2
0DBA:  BSF    0A.3
....................       lcd_putc("Out Of Range"); 
0DBB:  MOVLW  68
0DBC:  BSF    03.6
0DBD:  MOVWF  0D
0DBE:  MOVLW  00
0DBF:  MOVWF  0F
0DC0:  BCF    0A.3
0DC1:  BCF    03.6
0DC2:  CALL   310
0DC3:  BSF    0A.3
....................     } 
0DC4:  GOTO   6D7
....................     else{ 
....................       distance = i/28.5;                             // Calculate the distance 
0DC5:  MOVF   3B,W
0DC6:  MOVWF  61
0DC7:  MOVF   3A,W
0DC8:  MOVWF  60
0DC9:  BCF    0A.3
0DCA:  CALL   7C2
0DCB:  BSF    0A.3
0DCC:  MOVF   7A,W
0DCD:  MOVWF  44
0DCE:  MOVF   79,W
0DCF:  MOVWF  43
0DD0:  MOVF   78,W
0DD1:  MOVWF  42
0DD2:  MOVF   77,W
0DD3:  MOVWF  41
0DD4:  CLRF   48
0DD5:  CLRF   47
0DD6:  MOVLW  64
0DD7:  MOVWF  46
0DD8:  MOVLW  83
0DD9:  MOVWF  45
*
0EA3:  MOVF   7A,W
0EA4:  MOVWF  61
0EA5:  MOVF   79,W
0EA6:  MOVWF  60
0EA7:  MOVF   78,W
0EA8:  MOVWF  5F
0EA9:  MOVF   77,W
0EAA:  MOVWF  5E
0EAB:  BCF    0A.3
0EAC:  CALL   7DF
0EAD:  BSF    0A.3
0EAE:  MOVF   79,W
0EAF:  MOVWF  3D
0EB0:  MOVF   78,W
0EB1:  MOVWF  3C
....................       lcd_gotoxy(3, 2);                            // Go to column 3 row 2 
0EB2:  MOVLW  03
0EB3:  MOVWF  61
0EB4:  MOVLW  02
0EB5:  MOVWF  62
0EB6:  BCF    0A.3
0EB7:  CALL   2D2
0EB8:  BSF    0A.3
....................       lcd_putc("       cm   "); 
0EB9:  MOVLW  6F
0EBA:  BSF    03.6
0EBB:  MOVWF  0D
0EBC:  MOVLW  00
0EBD:  MOVWF  0F
0EBE:  BCF    0A.3
0EBF:  BCF    03.6
0EC0:  CALL   310
0EC1:  BSF    0A.3
....................       lcd_gotoxy(6, 2);                            // Go to column 6 row 2 
0EC2:  MOVLW  06
0EC3:  MOVWF  61
0EC4:  MOVLW  02
0EC5:  MOVWF  62
0EC6:  BCF    0A.3
0EC7:  CALL   2D2
0EC8:  BSF    0A.3
....................       printf(lcd_putc,"%3Lu",distance+1); 
0EC9:  MOVLW  01
0ECA:  ADDWF  3C,W
0ECB:  MOVWF  41
0ECC:  MOVF   3D,W
0ECD:  MOVWF  42
0ECE:  BTFSC  03.0
0ECF:  INCF   42,F
0ED0:  MOVLW  02
0ED1:  MOVWF  04
0ED2:  MOVF   42,W
0ED3:  MOVWF  44
0ED4:  MOVF   41,W
0ED5:  MOVWF  43
0ED6:  CALL   4B3
....................     } 
....................     delay_ms(100); 
0ED7:  MOVLW  64
0ED8:  MOVWF  63
0ED9:  BCF    0A.3
0EDA:  CALL   1C1
0EDB:  BSF    0A.3
0EDC:  GOTO   536
....................      
....................   } 
0EDD:  BCF    0A.3
0EDE:  BSF    0A.4
0EDF:  GOTO   56C (RETURN)
.................... } 
....................  
....................  
.................... void pot(){ 
....................  
.................... float volt ; 
.................... long analog_input ; 
.................... setup_adc_ports(A_analog); 
*
0F36:  BSF    03.5
0F37:  BCF    1F.0
0F38:  BSF    1F.1
0F39:  BCF    1F.2
0F3A:  BCF    1F.3
.................... setup_adc(adc_clock_internal); 
0F3B:  BCF    1F.6
0F3C:  BCF    03.5
0F3D:  BSF    1F.6
0F3E:  BSF    1F.7
0F3F:  BSF    03.5
0F40:  BSF    1F.7
0F41:  BCF    03.5
0F42:  BSF    1F.0
.................... lcd_putc("\f"); 
0F43:  MOVLW  76
0F44:  BSF    03.6
0F45:  MOVWF  0D
0F46:  MOVLW  00
0F47:  MOVWF  0F
0F48:  BCF    0A.3
0F49:  BCF    03.6
0F4A:  CALL   310
0F4B:  BSF    0A.3
.................... lcd_gotoxy(1,1); 
0F4C:  MOVLW  01
0F4D:  MOVWF  61
0F4E:  MOVWF  62
0F4F:  BCF    0A.3
0F50:  CALL   2D2
0F51:  BSF    0A.3
.................... lcd_putc("volt= "); 
0F52:  MOVLW  77
0F53:  BSF    03.6
0F54:  MOVWF  0D
0F55:  MOVLW  00
0F56:  MOVWF  0F
0F57:  BCF    0A.3
0F58:  BCF    03.6
0F59:  CALL   310
0F5A:  BSF    0A.3
.................... while(TRUE) 
.................... { 
.................... set_adc_channel(2); 
0F5B:  MOVLW  10
0F5C:  MOVWF  78
0F5D:  MOVF   1F,W
0F5E:  ANDLW  C7
0F5F:  IORWF  78,W
0F60:  MOVWF  1F
.................... delay_us(10); 
0F61:  MOVLW  02
0F62:  MOVWF  77
0F63:  DECFSZ 77,F
0F64:  GOTO   763
0F65:  GOTO   766
0F66:  NOP
.................... analog_input=read_adc(); 
0F67:  BSF    1F.2
0F68:  BTFSC  1F.2
0F69:  GOTO   768
0F6A:  BSF    03.5
0F6B:  MOVF   1E,W
0F6C:  BCF    03.5
0F6D:  MOVWF  45
0F6E:  MOVF   1E,W
0F6F:  MOVWF  46
.................... volt=(analog_input*5)/1023; 
0F70:  MOVF   46,W
0F71:  MOVWF  48
0F72:  MOVF   45,W
0F73:  MOVWF  47
0F74:  CLRF   4A
0F75:  MOVLW  05
0F76:  MOVWF  49
*
0F8B:  MOVF   79,W
0F8C:  MOVWF  48
0F8D:  MOVF   78,W
0F8E:  MOVWF  47
0F8F:  MOVF   48,W
0F90:  MOVWF  4A
0F91:  MOVF   47,W
0F92:  MOVWF  49
0F93:  MOVLW  03
0F94:  MOVWF  4C
0F95:  MOVLW  FF
0F96:  MOVWF  4B
*
0FBB:  MOVF   79,W
0FBC:  MOVWF  7A
0FBD:  MOVF   78,W
0FBE:  MOVWF  60
0FBF:  MOVF   79,W
0FC0:  MOVWF  61
0FC1:  BCF    0A.3
0FC2:  CALL   7C2
0FC3:  BSF    0A.3
0FC4:  MOVF   7A,W
0FC5:  MOVWF  44
0FC6:  MOVF   79,W
0FC7:  MOVWF  43
0FC8:  MOVF   78,W
0FC9:  MOVWF  42
0FCA:  MOVF   77,W
0FCB:  MOVWF  41
.................... lcd_gotoxy(1,2); 
0FCC:  MOVLW  01
0FCD:  MOVWF  61
0FCE:  MOVLW  02
0FCF:  MOVWF  62
0FD0:  BCF    0A.3
0FD1:  CALL   2D2
0FD2:  BSF    0A.3
.................... printf(lcd_putc,"%f",volt); 
0FD3:  MOVLW  89
0FD4:  MOVWF  04
0FD5:  MOVF   44,W
0FD6:  MOVWF  4A
0FD7:  MOVF   43,W
0FD8:  MOVWF  49
0FD9:  MOVF   42,W
0FDA:  MOVWF  48
0FDB:  MOVF   41,W
0FDC:  MOVWF  47
0FDD:  MOVLW  02
0FDE:  MOVWF  4B
0FDF:  BCF    0A.3
0FE0:  CALL   562
0FE1:  BSF    0A.3
.................... delay_ms(100); 
0FE2:  MOVLW  64
0FE3:  MOVWF  63
0FE4:  BCF    0A.3
0FE5:  CALL   1C1
0FE6:  BSF    0A.3
0FE7:  GOTO   75B
....................  
....................  
.................... }} 
0FE8:  BCF    0A.3
0FE9:  BSF    0A.4
0FEA:  GOTO   56C (RETURN)
....................  
....................  
.................... void lm35(){ 
....................  
....................  
.................... char message1[] = "Temp =  00.0 C"; 
*
1000:  MOVLW  54
1001:  MOVWF  41
1002:  MOVLW  65
1003:  MOVWF  42
1004:  MOVLW  6D
1005:  MOVWF  43
1006:  MOVLW  70
1007:  MOVWF  44
1008:  MOVLW  20
1009:  MOVWF  45
100A:  MOVLW  3D
100B:  MOVWF  46
100C:  MOVLW  20
100D:  MOVWF  47
100E:  MOVWF  48
100F:  MOVLW  30
1010:  MOVWF  49
1011:  MOVWF  4A
1012:  MOVLW  2E
1013:  MOVWF  4B
1014:  MOVLW  30
1015:  MOVWF  4C
1016:  MOVLW  20
1017:  MOVWF  4D
1018:  MOVLW  43
1019:  MOVWF  4E
101A:  CLRF   4F
.................... char message2[] =      "=  00.0 K"; 
101B:  MOVLW  3D
101C:  MOVWF  50
101D:  MOVLW  20
101E:  MOVWF  51
101F:  MOVWF  52
1020:  MOVLW  30
1021:  MOVWF  53
1022:  MOVWF  54
1023:  MOVLW  2E
1024:  MOVWF  55
1025:  MOVLW  30
1026:  MOVWF  56
1027:  MOVLW  20
1028:  MOVWF  57
1029:  MOVLW  4B
102A:  MOVWF  58
102B:  CLRF   59
.................... signed int16 Kelvin, Celsius; 
....................   setup_adc(ADC_CLOCK_INTERNAL);                 // ADC Module uses its internal oscillator 
102C:  BSF    03.5
102D:  BCF    1F.6
102E:  BCF    03.5
102F:  BSF    1F.6
1030:  BSF    1F.7
1031:  BSF    03.5
1032:  BSF    1F.7
1033:  BCF    03.5
1034:  BSF    1F.0
....................   setup_adc_ports(AN0);                          // Configure AN0 pin as analog 
1035:  BSF    03.5
1036:  BCF    1F.0
1037:  BSF    1F.1
1038:  BSF    1F.2
1039:  BSF    1F.3
....................   set_adc_channel(3);                            // Select channel 3 (AN3) 
103A:  MOVLW  18
103B:  MOVWF  78
103C:  BCF    03.5
103D:  MOVF   1F,W
103E:  ANDLW  C7
103F:  IORWF  78,W
1040:  MOVWF  1F
....................   lcd_init();                                    // Initialize LCD module 
1041:  BCF    0A.4
1042:  CALL   28E
1043:  BSF    0A.4
....................   lcd_putc('\f');                                // Clear LCD 
1044:  MOVLW  0C
1045:  MOVWF  60
1046:  BCF    0A.4
1047:  CALL   2E4
1048:  BSF    0A.4
....................   while(TRUE){ 
....................     delay_ms(1000); 
1049:  MOVLW  04
104A:  MOVWF  5E
104B:  MOVLW  FA
104C:  MOVWF  63
104D:  BCF    0A.4
104E:  CALL   1C1
104F:  BSF    0A.4
1050:  DECFSZ 5E,F
1051:  GOTO   04B
....................     Kelvin = read_adc() * 0.489;                 // Read analog voltage and convert it to Kelvin (0.489 = 500/1023) 
1052:  BSF    1F.2
1053:  BTFSC  1F.2
1054:  GOTO   053
1055:  MOVF   1E,W
1056:  MOVWF  7A
1057:  BSF    03.5
1058:  MOVF   1E,W
1059:  BCF    03.5
105A:  MOVWF  5E
105B:  MOVF   1E,W
105C:  MOVWF  5F
105D:  MOVWF  61
105E:  MOVF   5E,W
105F:  MOVWF  60
1060:  BCF    0A.4
1061:  CALL   7C2
1062:  BSF    0A.4
1063:  MOVF   7A,W
1064:  MOVWF  63
1065:  MOVF   79,W
1066:  MOVWF  62
1067:  MOVF   78,W
1068:  MOVWF  61
1069:  MOVF   77,W
106A:  MOVWF  60
106B:  MOVLW  35
106C:  MOVWF  67
106D:  MOVLW  5E
106E:  MOVWF  66
106F:  MOVLW  7A
1070:  MOVWF  65
1071:  MOVLW  7D
1072:  MOVWF  64
1073:  BCF    0A.4
1074:  CALL   49E
1075:  BSF    0A.4
1076:  MOVF   7A,W
1077:  MOVWF  61
1078:  MOVF   79,W
1079:  MOVWF  60
107A:  MOVF   78,W
107B:  MOVWF  5F
107C:  MOVF   77,W
107D:  MOVWF  5E
107E:  BCF    0A.4
107F:  CALL   7DF
1080:  BSF    0A.4
1081:  MOVF   79,W
1082:  MOVWF  5B
1083:  MOVF   78,W
1084:  MOVWF  5A
....................     Celsius = Kelvin - 273;                      // Convert Kelvin to degree Celsius 
1085:  MOVLW  11
1086:  SUBWF  5A,W
1087:  MOVWF  5C
1088:  MOVF   5B,W
1089:  MOVWF  5D
108A:  MOVLW  01
108B:  BTFSS  03.0
108C:  MOVLW  02
108D:  SUBWF  5D,F
....................     if(Celsius < 0){ 
108E:  BTFSS  5D.7
108F:  GOTO   0A4
....................       Celsius = abs(Celsius);                    // Absolute value 
1090:  MOVF   5D,W
1091:  MOVWF  7A
1092:  MOVF   5C,W
1093:  BTFSS  5D.7
1094:  GOTO   09E
1095:  MOVF   5C,W
1096:  SUBLW  00
1097:  MOVWF  77
1098:  CLRF   7A
1099:  MOVF   5D,W
109A:  BTFSS  03.0
109B:  INCFSZ 5D,W
109C:  SUBWF  7A,F
109D:  MOVF   77,W
109E:  MOVWF  5C
109F:  MOVF   7A,W
10A0:  MOVWF  5D
....................       message1[7] = '-';                         // Put minus "-" sign 
10A1:  MOVLW  2D
10A2:  MOVWF  48
....................     } 
10A3:  GOTO   0A6
....................     else 
....................       message1[7]  = ' ';                        // Put space  
10A4:  MOVLW  20
10A5:  MOVWF  48
....................     if (Celsius > 99) 
10A6:  BTFSC  5D.7
10A7:  GOTO   0B1
10A8:  MOVF   5D,F
10A9:  BTFSS  03.2
10AA:  GOTO   0AF
10AB:  MOVF   5C,W
10AC:  SUBLW  63
10AD:  BTFSC  03.0
10AE:  GOTO   0B1
....................       message1[7]  = 1 + 48;                     // Put 1 (of hundred) 
10AF:  MOVLW  31
10B0:  MOVWF  48
....................     message1[8]  = (Celsius / 10) % 10  + 48; 
10B1:  MOVF   5D,W
10B2:  MOVWF  61
10B3:  MOVF   5C,W
10B4:  MOVWF  60
10B5:  CLRF   63
10B6:  MOVLW  0A
10B7:  MOVWF  62
10B8:  BCF    0A.4
10B9:  BSF    0A.3
10BA:  CALL   6E0
10BB:  BSF    0A.4
10BC:  BCF    0A.3
10BD:  MOVF   79,W
10BE:  MOVWF  5F
10BF:  MOVF   78,W
10C0:  MOVWF  5E
10C1:  MOVF   5F,W
10C2:  MOVWF  61
10C3:  MOVF   5E,W
10C4:  MOVWF  60
10C5:  CLRF   63
10C6:  MOVLW  0A
10C7:  MOVWF  62
10C8:  BCF    0A.4
10C9:  BSF    0A.3
10CA:  CALL   6E0
10CB:  BSF    0A.4
10CC:  BCF    0A.3
10CD:  MOVF   77,W
10CE:  MOVWF  5E
10CF:  MOVF   7A,W
10D0:  MOVWF  5F
10D1:  MOVLW  30
10D2:  ADDWF  5E,W
10D3:  MOVWF  49
....................     message1[9]  =  Celsius % 10  + 48; 
10D4:  MOVF   5D,W
10D5:  MOVWF  61
10D6:  MOVF   5C,W
10D7:  MOVWF  60
10D8:  CLRF   63
10D9:  MOVLW  0A
10DA:  MOVWF  62
10DB:  BCF    0A.4
10DC:  BSF    0A.3
10DD:  CALL   6E0
10DE:  BSF    0A.4
10DF:  BCF    0A.3
10E0:  MOVF   77,W
10E1:  MOVWF  5E
10E2:  MOVF   7A,W
10E3:  MOVWF  5F
10E4:  MOVLW  30
10E5:  ADDWF  5E,W
10E6:  MOVWF  4A
....................     message1[12] = 223;                          // Degree symbol 
10E7:  MOVLW  DF
10E8:  MOVWF  4D
....................     message2[2]  = (Kelvin / 100) % 10 + 48; 
10E9:  MOVF   5B,W
10EA:  MOVWF  61
10EB:  MOVF   5A,W
10EC:  MOVWF  60
10ED:  CLRF   63
10EE:  MOVLW  64
10EF:  MOVWF  62
10F0:  BCF    0A.4
10F1:  BSF    0A.3
10F2:  CALL   6E0
10F3:  BSF    0A.4
10F4:  BCF    0A.3
10F5:  MOVF   79,W
10F6:  MOVWF  5F
10F7:  MOVF   78,W
10F8:  MOVWF  5E
10F9:  MOVF   5F,W
10FA:  MOVWF  61
10FB:  MOVF   5E,W
10FC:  MOVWF  60
10FD:  CLRF   63
10FE:  MOVLW  0A
10FF:  MOVWF  62
1100:  BCF    0A.4
1101:  BSF    0A.3
1102:  CALL   6E0
1103:  BSF    0A.4
1104:  BCF    0A.3
1105:  MOVF   77,W
1106:  MOVWF  5E
1107:  MOVF   7A,W
1108:  MOVWF  5F
1109:  MOVLW  30
110A:  ADDWF  5E,W
110B:  MOVWF  52
....................     message2[3]  = (Kelvin / 10) % 10 + 48; 
110C:  MOVF   5B,W
110D:  MOVWF  61
110E:  MOVF   5A,W
110F:  MOVWF  60
1110:  CLRF   63
1111:  MOVLW  0A
1112:  MOVWF  62
1113:  BCF    0A.4
1114:  BSF    0A.3
1115:  CALL   6E0
1116:  BSF    0A.4
1117:  BCF    0A.3
1118:  MOVF   79,W
1119:  MOVWF  5F
111A:  MOVF   78,W
111B:  MOVWF  5E
111C:  MOVF   5F,W
111D:  MOVWF  61
111E:  MOVF   5E,W
111F:  MOVWF  60
1120:  CLRF   63
1121:  MOVLW  0A
1122:  MOVWF  62
1123:  BCF    0A.4
1124:  BSF    0A.3
1125:  CALL   6E0
1126:  BSF    0A.4
1127:  BCF    0A.3
1128:  MOVF   77,W
1129:  MOVWF  5E
112A:  MOVF   7A,W
112B:  MOVWF  5F
112C:  MOVLW  30
112D:  ADDWF  5E,W
112E:  MOVWF  53
....................     message2[4] = Kelvin % 10 + 48; 
112F:  MOVF   5B,W
1130:  MOVWF  61
1131:  MOVF   5A,W
1132:  MOVWF  60
1133:  CLRF   63
1134:  MOVLW  0A
1135:  MOVWF  62
1136:  BCF    0A.4
1137:  BSF    0A.3
1138:  CALL   6E0
1139:  BSF    0A.4
113A:  BCF    0A.3
113B:  MOVF   77,W
113C:  MOVWF  5E
113D:  MOVF   7A,W
113E:  MOVWF  5F
113F:  MOVLW  30
1140:  ADDWF  5E,W
1141:  MOVWF  54
....................     lcd_gotoxy(1, 1);                            // Go to column 1 row 1 
1142:  MOVLW  01
1143:  MOVWF  61
1144:  MOVWF  62
1145:  BCF    0A.4
1146:  CALL   2D2
1147:  BSF    0A.4
....................     printf(lcd_putc, message1);                  // Display message1 
1148:  MOVLW  41
1149:  MOVWF  04
114A:  BCF    03.7
114B:  BCF    0A.4
114C:  BSF    0A.3
114D:  CALL   71E
114E:  BSF    0A.4
114F:  BCF    0A.3
....................     lcd_gotoxy(6, 2);                            // Go to column 6 row 2 
1150:  MOVLW  06
1151:  MOVWF  61
1152:  MOVLW  02
1153:  MOVWF  62
1154:  BCF    0A.4
1155:  CALL   2D2
1156:  BSF    0A.4
....................     printf(lcd_putc, message2);                  // Display message2 
1157:  MOVLW  50
1158:  MOVWF  04
1159:  BCF    03.7
115A:  BCF    0A.4
115B:  BSF    0A.3
115C:  CALL   71E
115D:  BSF    0A.4
115E:  BCF    0A.3
115F:  GOTO   049
....................      
....................    
....................   } 
1160:  BCF    0A.3
1161:  BSF    0A.4
1162:  GOTO   56C (RETURN)
....................   } 
....................    
.................... void dc(){ 
.................... setup_adc(ADC_CLOCK_DIV_32);           // Set ADC conversion time to 32Tosc 
*
09D8:  BSF    03.5
09D9:  BCF    1F.6
09DA:  BCF    03.5
09DB:  BCF    1F.6
09DC:  BSF    1F.7
09DD:  BSF    03.5
09DE:  BSF    1F.7
09DF:  BCF    03.5
09E0:  BSF    1F.0
....................   setup_adc_ports(AN0_AN1_AN3);          // Configure AN0,AN1 and AN3 as analog 
09E1:  BSF    03.5
09E2:  BCF    1F.0
09E3:  BCF    1F.1
09E4:  BSF    1F.2
09E5:  BCF    1F.3
....................   setup_ccp1(CCP_PWM);                   // Configure CCP1 as a PWM 
09E6:  BCF    03.5
09E7:  BCF    40.2
09E8:  MOVF   40,W
09E9:  BSF    03.5
09EA:  MOVWF  07
09EB:  BCF    03.5
09EC:  BCF    07.2
09ED:  MOVLW  0C
09EE:  MOVWF  17
....................   setup_ccp2(CCP_PWM);                   // Configure CCP2 as a PWM 
09EF:  BCF    40.1
09F0:  MOVF   40,W
09F1:  BSF    03.5
09F2:  MOVWF  07
09F3:  BCF    03.5
09F4:  BCF    07.1
09F5:  MOVLW  0C
09F6:  MOVWF  1D
....................   delay_ms(100);                         // Wait 100ms 
09F7:  MOVLW  64
09F8:  MOVWF  63
09F9:  BCF    0A.3
09FA:  CALL   1C1
09FB:  BSF    0A.3
....................   setup_timer_2(T2_DIV_BY_16, 255, 1);   // Set PWM frequency to 488Hz 
09FC:  MOVLW  00
09FD:  MOVWF  78
09FE:  IORLW  06
09FF:  MOVWF  12
0A00:  MOVLW  FF
0A01:  BSF    03.5
0A02:  MOVWF  12
....................    
....................   while(seg){ 
0A03:  BCF    03.5
0A04:  MOVF   34,F
0A05:  BTFSC  03.2
0A06:  GOTO   3D6
....................  if(!with_time){  
0A07:  MOVF   37,F
0A08:  BTFSS  03.2
0A09:  GOTO   239
.................... lcd_putc("\f"); 
0A0A:  MOVLW  7B
0A0B:  BSF    03.6
0A0C:  MOVWF  0D
0A0D:  MOVLW  00
0A0E:  MOVWF  0F
0A0F:  BCF    0A.3
0A10:  BCF    03.6
0A11:  CALL   310
0A12:  BSF    0A.3
.................... lcd_gotoxy(1,1); 
0A13:  MOVLW  01
0A14:  MOVWF  61
0A15:  MOVWF  62
0A16:  BCF    0A.3
0A17:  CALL   2D2
0A18:  BSF    0A.3
.................... lcd_putc("foe set speed "); 
0A19:  MOVLW  7C
0A1A:  BSF    03.6
0A1B:  MOVWF  0D
0A1C:  MOVLW  00
0A1D:  MOVWF  0F
0A1E:  BCF    0A.3
0A1F:  BCF    03.6
0A20:  CALL   310
0A21:  BSF    0A.3
.................... lcd_gotoxy(1,2); 
0A22:  MOVLW  01
0A23:  MOVWF  61
0A24:  MOVLW  02
0A25:  MOVWF  62
0A26:  BCF    0A.3
0A27:  CALL   2D2
0A28:  BSF    0A.3
.................... lcd_putc("enter  0 ");    
0A29:  MOVLW  84
0A2A:  BSF    03.6
0A2B:  MOVWF  0D
0A2C:  MOVLW  00
0A2D:  MOVWF  0F
0A2E:  BCF    0A.3
0A2F:  BCF    03.6
0A30:  CALL   310
0A31:  BSF    0A.3
.................... if(input(pin_d6)) 
0A32:  BSF    03.5
0A33:  BSF    08.6
0A34:  BCF    03.5
0A35:  BTFSS  08.6
0A36:  GOTO   239
....................     {change_speed=1;}} 
0A37:  MOVLW  01
0A38:  MOVWF  38
....................      
....................      output_high(pin_c0); 
0A39:  BCF    40.0
0A3A:  MOVF   40,W
0A3B:  BSF    03.5
0A3C:  MOVWF  07
0A3D:  BCF    03.5
0A3E:  BSF    07.0
....................     output_low(pin_c3); 
0A3F:  BCF    40.3
0A40:  MOVF   40,W
0A41:  BSF    03.5
0A42:  MOVWF  07
0A43:  BCF    03.5
0A44:  BCF    07.3
....................         output_high(pin_c4); 
0A45:  BCF    40.4
0A46:  MOVF   40,W
0A47:  BSF    03.5
0A48:  MOVWF  07
0A49:  BCF    03.5
0A4A:  BSF    07.4
....................     output_low(pin_c5);// Read from AN1 and store in j 
0A4B:  BCF    40.5
0A4C:  MOVF   40,W
0A4D:  BSF    03.5
0A4E:  MOVWF  07
0A4F:  BCF    03.5
0A50:  BCF    07.5
....................     set_pwm1_duty(pwm); 
0A51:  MOVF   2C,W
0A52:  MOVWF  79
0A53:  MOVF   2B,W
0A54:  MOVWF  78
0A55:  RRF    79,F
0A56:  RRF    78,F
0A57:  RRF    79,F
0A58:  RRF    78,F
0A59:  RRF    79,F
0A5A:  MOVF   78,W
0A5B:  MOVWF  15
0A5C:  RRF    79,F
0A5D:  RRF    79,W
0A5E:  ANDLW  30
0A5F:  MOVWF  77
0A60:  MOVF   17,W
0A61:  ANDLW  CF
0A62:  IORWF  77,W
0A63:  MOVWF  17
....................     set_pwm2_duty(pwm); 
0A64:  MOVF   2C,W
0A65:  MOVWF  79
0A66:  MOVF   2B,W
0A67:  MOVWF  78
0A68:  RRF    79,F
0A69:  RRF    78,F
0A6A:  RRF    79,F
0A6B:  RRF    78,F
0A6C:  RRF    79,F
0A6D:  MOVF   78,W
0A6E:  MOVWF  1B
0A6F:  RRF    79,F
0A70:  RRF    79,W
0A71:  ANDLW  30
0A72:  MOVWF  77
0A73:  MOVF   1D,W
0A74:  ANDLW  CF
0A75:  IORWF  77,W
0A76:  MOVWF  1D
....................     delay_ms(50); // Wait 1ms 
0A77:  MOVLW  32
0A78:  MOVWF  63
0A79:  BCF    0A.3
0A7A:  CALL   1C1
0A7B:  BSF    0A.3
....................     output_high(pin_d4); 
0A7C:  BSF    03.5
0A7D:  BCF    08.4
0A7E:  BCF    03.5
0A7F:  BSF    08.4
....................     
....................      
....................     if(!no_time){ 
0A80:  MOVF   36,F
0A81:  BTFSS  03.2
0A82:  GOTO   2E9
....................   
....................     if(to_zero>0) 
0A83:  MOVF   35,F
0A84:  BTFSC  03.2
0A85:  GOTO   29F
....................     { 
....................    to_zero--; 
0A86:  DECF   35,F
....................    output_high(pin_e0); 
0A87:  BSF    03.5
0A88:  BCF    09.0
0A89:  BCF    03.5
0A8A:  BSF    09.0
.................... delay_us(10); 
0A8B:  MOVLW  02
0A8C:  MOVWF  77
0A8D:  DECFSZ 77,F
0A8E:  GOTO   28D
0A8F:  GOTO   290
0A90:  NOP
.................... output_low(pin_e0); 
0A91:  BSF    03.5
0A92:  BCF    09.0
0A93:  BCF    03.5
0A94:  BCF    09.0
....................  delay_ms(600); 
0A95:  MOVLW  03
0A96:  MOVWF  41
0A97:  MOVLW  C8
0A98:  MOVWF  63
0A99:  BCF    0A.3
0A9A:  CALL   1C1
0A9B:  BSF    0A.3
0A9C:  DECFSZ 41,F
0A9D:  GOTO   297
.................... } 
0A9E:  GOTO   2E9
.................... else{ 
.................... output_high(pin_b0); 
0A9F:  BSF    03.5
0AA0:  BCF    06.0
0AA1:  BCF    03.5
0AA2:  BSF    06.0
.................... delay_ms(500); 
0AA3:  MOVLW  02
0AA4:  MOVWF  41
0AA5:  MOVLW  FA
0AA6:  MOVWF  63
0AA7:  BCF    0A.3
0AA8:  CALL   1C1
0AA9:  BSF    0A.3
0AAA:  DECFSZ 41,F
0AAB:  GOTO   2A5
.................... output_low(pin_b0); 
0AAC:  BSF    03.5
0AAD:  BCF    06.0
0AAE:  BCF    03.5
0AAF:  BCF    06.0
.................... output_low(pin_c0); 
0AB0:  BCF    40.0
0AB1:  MOVF   40,W
0AB2:  BSF    03.5
0AB3:  MOVWF  07
0AB4:  BCF    03.5
0AB5:  BCF    07.0
.................... output_low(pin_c3); 
0AB6:  BCF    40.3
0AB7:  MOVF   40,W
0AB8:  BSF    03.5
0AB9:  MOVWF  07
0ABA:  BCF    03.5
0ABB:  BCF    07.3
.................... output_low(pin_c4); 
0ABC:  BCF    40.4
0ABD:  MOVF   40,W
0ABE:  BSF    03.5
0ABF:  MOVWF  07
0AC0:  BCF    03.5
0AC1:  BCF    07.4
.................... output_low(pin_c5); 
0AC2:  BCF    40.5
0AC3:  MOVF   40,W
0AC4:  BSF    03.5
0AC5:  MOVWF  07
0AC6:  BCF    03.5
0AC7:  BCF    07.5
.................... output_low(pin_d0); 
0AC8:  BSF    03.5
0AC9:  BCF    08.0
0ACA:  BCF    03.5
0ACB:  BCF    08.0
.................... delay_ms(1000); 
0ACC:  MOVLW  04
0ACD:  MOVWF  41
0ACE:  MOVLW  FA
0ACF:  MOVWF  63
0AD0:  BCF    0A.3
0AD1:  CALL   1C1
0AD2:  BSF    0A.3
0AD3:  DECFSZ 41,F
0AD4:  GOTO   2CE
.................... output_high(pin_d0); 
0AD5:  BSF    03.5
0AD6:  BCF    08.0
0AD7:  BCF    03.5
0AD8:  BSF    08.0
.................... delay_ms(1000); 
0AD9:  MOVLW  04
0ADA:  MOVWF  41
0ADB:  MOVLW  FA
0ADC:  MOVWF  63
0ADD:  BCF    0A.3
0ADE:  CALL   1C1
0ADF:  BSF    0A.3
0AE0:  DECFSZ 41,F
0AE1:  GOTO   2DB
.................... output_low(pin_d0); 
0AE2:  BSF    03.5
0AE3:  BCF    08.0
0AE4:  BCF    03.5
0AE5:  BCF    08.0
....................   set_pwm1_duty(0); 
0AE6:  CLRF   15
....................     set_pwm2_duty(0); 
0AE7:  CLRF   1B
.................... seg=0; 
0AE8:  CLRF   34
....................  
.................... }} 
.................... while (change_speed) 
0AE9:  MOVF   38,F
0AEA:  BTFSC  03.2
0AEB:  GOTO   3D5
.................... { 
.................... lcd_putc("\f"); 
0AEC:  MOVLW  89
0AED:  BSF    03.6
0AEE:  MOVWF  0D
0AEF:  MOVLW  00
0AF0:  MOVWF  0F
0AF1:  BCF    0A.3
0AF2:  BCF    03.6
0AF3:  CALL   310
0AF4:  BSF    0A.3
.................... lcd_gotoxy(1,1); 
0AF5:  MOVLW  01
0AF6:  MOVWF  61
0AF7:  MOVWF  62
0AF8:  BCF    0A.3
0AF9:  CALL   2D2
0AFA:  BSF    0A.3
.................... lcd_putc("* for up speed"); 
0AFB:  MOVLW  8A
0AFC:  BSF    03.6
0AFD:  MOVWF  0D
0AFE:  MOVLW  00
0AFF:  MOVWF  0F
0B00:  BCF    0A.3
0B01:  BCF    03.6
0B02:  CALL   310
0B03:  BSF    0A.3
.................... lcd_gotoxy(1,2); 
0B04:  MOVLW  01
0B05:  MOVWF  61
0B06:  MOVLW  02
0B07:  MOVWF  62
0B08:  BCF    0A.3
0B09:  CALL   2D2
0B0A:  BSF    0A.3
.................... lcd_putc("# for down speed "); 
0B0B:  MOVLW  92
0B0C:  BSF    03.6
0B0D:  MOVWF  0D
0B0E:  MOVLW  00
0B0F:  MOVWF  0F
0B10:  BCF    0A.3
0B11:  BCF    03.6
0B12:  CALL   310
0B13:  BSF    0A.3
.................... lcd_gotoxy(21,1); 
0B14:  MOVLW  15
0B15:  MOVWF  61
0B16:  MOVLW  01
0B17:  MOVWF  62
0B18:  BCF    0A.3
0B19:  CALL   2D2
0B1A:  BSF    0A.3
.................... lcd_putc("0 for start"); 
0B1B:  MOVLW  9B
0B1C:  BSF    03.6
0B1D:  MOVWF  0D
0B1E:  MOVLW  00
0B1F:  MOVWF  0F
0B20:  BCF    0A.3
0B21:  BCF    03.6
0B22:  CALL   310
0B23:  BSF    0A.3
.................... lcd_gotoxy(21,2); 
0B24:  MOVLW  15
0B25:  MOVWF  61
0B26:  MOVLW  02
0B27:  MOVWF  62
0B28:  BCF    0A.3
0B29:  CALL   2D2
0B2A:  BSF    0A.3
.................... printf(lcd_putc,"PWM = %f ",pwm); 
0B2B:  MOVLW  A1
0B2C:  BSF    03.6
0B2D:  MOVWF  0D
0B2E:  MOVLW  00
0B2F:  MOVWF  0F
0B30:  BCF    03.0
0B31:  MOVLW  06
0B32:  BCF    03.6
0B33:  MOVWF  41
0B34:  BCF    0A.3
0B35:  CALL   447
0B36:  BSF    0A.3
0B37:  MOVLW  89
0B38:  MOVWF  04
0B39:  MOVF   2E,W
0B3A:  MOVWF  4A
0B3B:  MOVF   2D,W
0B3C:  MOVWF  49
0B3D:  MOVF   2C,W
0B3E:  MOVWF  48
0B3F:  MOVF   2B,W
0B40:  MOVWF  47
0B41:  MOVLW  02
0B42:  MOVWF  4B
0B43:  BCF    0A.3
0B44:  CALL   562
0B45:  BSF    0A.3
0B46:  MOVLW  20
0B47:  MOVWF  60
0B48:  BCF    0A.3
0B49:  CALL   2E4
0B4A:  BSF    0A.3
.................... output_low(pin_c0); 
0B4B:  BCF    40.0
0B4C:  MOVF   40,W
0B4D:  BSF    03.5
0B4E:  MOVWF  07
0B4F:  BCF    03.5
0B50:  BCF    07.0
.................... output_low(pin_c3); 
0B51:  BCF    40.3
0B52:  MOVF   40,W
0B53:  BSF    03.5
0B54:  MOVWF  07
0B55:  BCF    03.5
0B56:  BCF    07.3
.................... output_low(pin_c4); 
0B57:  BCF    40.4
0B58:  MOVF   40,W
0B59:  BSF    03.5
0B5A:  MOVWF  07
0B5B:  BCF    03.5
0B5C:  BCF    07.4
.................... output_low(pin_c5); 
0B5D:  BCF    40.5
0B5E:  MOVF   40,W
0B5F:  BSF    03.5
0B60:  MOVWF  07
0B61:  BCF    03.5
0B62:  BCF    07.5
.................... key(); 
0B63:  BCF    0A.3
0B64:  CALL   366
0B65:  BSF    0A.3
.................... if (num=='*'){ 
0B66:  MOVF   30,W
0B67:  SUBLW  2A
0B68:  BTFSS  03.2
0B69:  GOTO   39D
.................... pwm=pwm+1; 
0B6A:  BCF    03.1
0B6B:  MOVF   2E,W
0B6C:  MOVWF  44
0B6D:  MOVF   2D,W
0B6E:  MOVWF  43
0B6F:  MOVF   2C,W
0B70:  MOVWF  42
0B71:  MOVF   2B,W
0B72:  MOVWF  41
0B73:  CLRF   48
0B74:  CLRF   47
0B75:  CLRF   46
0B76:  MOVLW  7F
0B77:  MOVWF  45
0B78:  BCF    0A.3
0B79:  CALL   642
0B7A:  BSF    0A.3
0B7B:  MOVF   7A,W
0B7C:  MOVWF  2E
0B7D:  MOVF   79,W
0B7E:  MOVWF  2D
0B7F:  MOVF   78,W
0B80:  MOVWF  2C
0B81:  MOVF   77,W
0B82:  MOVWF  2B
.................... if(pwm>1000)pwm=1000;} 
0B83:  CLRF   44
0B84:  CLRF   43
0B85:  MOVLW  7A
0B86:  MOVWF  42
0B87:  MOVLW  88
0B88:  MOVWF  41
0B89:  MOVF   2E,W
0B8A:  MOVWF  48
0B8B:  MOVF   2D,W
0B8C:  MOVWF  47
0B8D:  MOVF   2C,W
0B8E:  MOVWF  46
0B8F:  MOVF   2B,W
0B90:  MOVWF  45
0B91:  BCF    0A.3
0B92:  CALL   783
0B93:  BSF    0A.3
0B94:  BTFSS  03.0
0B95:  GOTO   39C
0B96:  CLRF   2E
0B97:  CLRF   2D
0B98:  MOVLW  7A
0B99:  MOVWF  2C
0B9A:  MOVLW  88
0B9B:  MOVWF  2B
0B9C:  GOTO   3D4
....................  
.................... else if (num=='#'){ 
0B9D:  MOVF   30,W
0B9E:  SUBLW  23
0B9F:  BTFSS  03.2
0BA0:  GOTO   3D0
.................... pwm=pwm-1; 
0BA1:  BSF    03.1
0BA2:  MOVF   2E,W
0BA3:  MOVWF  44
0BA4:  MOVF   2D,W
0BA5:  MOVWF  43
0BA6:  MOVF   2C,W
0BA7:  MOVWF  42
0BA8:  MOVF   2B,W
0BA9:  MOVWF  41
0BAA:  CLRF   48
0BAB:  CLRF   47
0BAC:  CLRF   46
0BAD:  MOVLW  7F
0BAE:  MOVWF  45
0BAF:  BCF    0A.3
0BB0:  CALL   642
0BB1:  BSF    0A.3
0BB2:  MOVF   7A,W
0BB3:  MOVWF  2E
0BB4:  MOVF   79,W
0BB5:  MOVWF  2D
0BB6:  MOVF   78,W
0BB7:  MOVWF  2C
0BB8:  MOVF   77,W
0BB9:  MOVWF  2B
.................... if(pwm<0)pwm=0;} 
0BBA:  MOVF   2E,W
0BBB:  MOVWF  44
0BBC:  MOVF   2D,W
0BBD:  MOVWF  43
0BBE:  MOVF   2C,W
0BBF:  MOVWF  42
0BC0:  MOVF   2B,W
0BC1:  MOVWF  41
0BC2:  CLRF   48
0BC3:  CLRF   47
0BC4:  CLRF   46
0BC5:  CLRF   45
0BC6:  BCF    0A.3
0BC7:  CALL   783
0BC8:  BSF    0A.3
0BC9:  BTFSS  03.0
0BCA:  GOTO   3CF
0BCB:  CLRF   2E
0BCC:  CLRF   2D
0BCD:  CLRF   2C
0BCE:  CLRF   2B
0BCF:  GOTO   3D4
....................  
.................... else if (num=='0'){ 
0BD0:  MOVF   30,W
0BD1:  SUBLW  30
0BD2:  BTFSC  03.2
.................... change_speed=0;} 
0BD3:  CLRF   38
0BD4:  GOTO   2E9
....................  
.................... } 
0BD5:  GOTO   204
....................  
....................   }} 
0BD6:  RETURN
....................  
....................  
.................... void segment(){ 
.................... set_tris_a(0x00); 
*
0800:  MOVLW  00
0801:  BSF    03.5
0802:  MOVWF  05
.................... lcd_gotoxy(1,1); 
0803:  MOVLW  01
0804:  BCF    03.5
0805:  MOVWF  61
0806:  MOVWF  62
0807:  BCF    0A.3
0808:  CALL   2D2
0809:  BSF    0A.3
.................... lcd_putc("\f"); 
080A:  MOVLW  A6
080B:  BSF    03.6
080C:  MOVWF  0D
080D:  MOVLW  00
080E:  MOVWF  0F
080F:  BCF    0A.3
0810:  BCF    03.6
0811:  CALL   310
0812:  BSF    0A.3
.................... lcd_putc("set the time  "); 
0813:  MOVLW  A7
0814:  BSF    03.6
0815:  MOVWF  0D
0816:  MOVLW  00
0817:  MOVWF  0F
0818:  BCF    0A.3
0819:  BCF    03.6
081A:  CALL   310
081B:  BSF    0A.3
.................... lcd_gotoxy(1,2); 
081C:  MOVLW  01
081D:  MOVWF  61
081E:  MOVLW  02
081F:  MOVWF  62
0820:  BCF    0A.3
0821:  CALL   2D2
0822:  BSF    0A.3
.................... lcd_putc("input * for up "); 
0823:  MOVLW  AF
0824:  BSF    03.6
0825:  MOVWF  0D
0826:  MOVLW  00
0827:  MOVWF  0F
0828:  BCF    0A.3
0829:  BCF    03.6
082A:  CALL   310
082B:  BSF    0A.3
.................... lcd_gotoxy(21,1); 
082C:  MOVLW  15
082D:  MOVWF  61
082E:  MOVLW  01
082F:  MOVWF  62
0830:  BCF    0A.3
0831:  CALL   2D2
0832:  BSF    0A.3
.................... lcd_putc("input # for down"); 
0833:  MOVLW  B7
0834:  BSF    03.6
0835:  MOVWF  0D
0836:  MOVLW  00
0837:  MOVWF  0F
0838:  BCF    0A.3
0839:  BCF    03.6
083A:  CALL   310
083B:  BSF    0A.3
.................... lcd_gotoxy(21,2); 
083C:  MOVLW  15
083D:  MOVWF  61
083E:  MOVLW  02
083F:  MOVWF  62
0840:  BCF    0A.3
0841:  CALL   2D2
0842:  BSF    0A.3
.................... lcd_putc("input 0 for start"); 
0843:  MOVLW  C0
0844:  BSF    03.6
0845:  MOVWF  0D
0846:  MOVLW  00
0847:  MOVWF  0F
0848:  BCF    0A.3
0849:  BCF    03.6
084A:  CALL   310
084B:  BSF    0A.3
....................  
.................... output_low(pin_a1); 
084C:  BCF    05.1
.................... output_low(pin_a2); 
084D:  BCF    05.2
.................... output_low(pin_d0); 
084E:  BSF    03.5
084F:  BCF    08.0
0850:  BCF    03.5
0851:  BCF    08.0
....................  
.................... while(!start){ 
0852:  MOVF   33,F
0853:  BTFSS  03.2
0854:  GOTO   1D5
.................... key(); 
0855:  BCF    0A.3
0856:  CALL   366
0857:  BSF    0A.3
.................... if (num=='*'){ 
0858:  MOVF   30,W
0859:  SUBLW  2A
085A:  BTFSS  03.2
085B:  GOTO   06C
.................... output_high(pin_a5); 
085C:  BSF    05.5
.................... delay_us(10); 
085D:  MOVLW  02
085E:  MOVWF  77
085F:  DECFSZ 77,F
0860:  GOTO   05F
0861:  GOTO   062
0862:  NOP
.................... output_low(pin_a5); 
0863:  BCF    05.5
.................... delay_us(10); 
0864:  MOVLW  02
0865:  MOVWF  77
0866:  DECFSZ 77,F
0867:  GOTO   066
0868:  GOTO   069
0869:  NOP
.................... to_zero++;} 
086A:  INCF   35,F
086B:  GOTO   1D4
....................  
.................... else if (num=='#'){ 
086C:  MOVF   30,W
086D:  SUBLW  23
086E:  BTFSS  03.2
086F:  GOTO   086
.................... output_high(pin_e0); 
0870:  BSF    03.5
0871:  BCF    09.0
0872:  BCF    03.5
0873:  BSF    09.0
.................... delay_us(10); 
0874:  MOVLW  02
0875:  MOVWF  77
0876:  DECFSZ 77,F
0877:  GOTO   076
0878:  GOTO   079
0879:  NOP
.................... output_low(pin_e0); 
087A:  BSF    03.5
087B:  BCF    09.0
087C:  BCF    03.5
087D:  BCF    09.0
.................... delay_us(10); 
087E:  MOVLW  02
087F:  MOVWF  77
0880:  DECFSZ 77,F
0881:  GOTO   080
0882:  GOTO   083
0883:  NOP
.................... to_zero--;} 
0884:  DECF   35,F
0885:  GOTO   1D4
....................  
.................... else if (num=='0'){ 
0886:  MOVF   30,W
0887:  SUBLW  30
0888:  BTFSS  03.2
0889:  GOTO   1AC
.................... lcd_putc("\f"); 
088A:  MOVLW  C9
088B:  BSF    03.6
088C:  MOVWF  0D
088D:  MOVLW  00
088E:  MOVWF  0F
088F:  BCF    0A.3
0890:  BCF    03.6
0891:  CALL   310
0892:  BSF    0A.3
.................... lcd_gotoxy(1,1); 
0893:  MOVLW  01
0894:  MOVWF  61
0895:  MOVWF  62
0896:  BCF    0A.3
0897:  CALL   2D2
0898:  BSF    0A.3
.................... lcd_putc("set the speed  "); 
0899:  MOVLW  CA
089A:  BSF    03.6
089B:  MOVWF  0D
089C:  MOVLW  00
089D:  MOVWF  0F
089E:  BCF    0A.3
089F:  BCF    03.6
08A0:  CALL   310
08A1:  BSF    0A.3
.................... delay_ms(500); 
08A2:  MOVLW  02
08A3:  MOVWF  41
08A4:  MOVLW  FA
08A5:  MOVWF  63
08A6:  BCF    0A.3
08A7:  CALL   1C1
08A8:  BSF    0A.3
08A9:  DECFSZ 41,F
08AA:  GOTO   0A4
.................... change_speed=1; 
08AB:  MOVLW  01
08AC:  MOVWF  38
.................... while (change_speed) 
08AD:  MOVF   38,F
08AE:  BTFSC  03.2
08AF:  GOTO   199
.................... { 
.................... lcd_putc("\f"); 
08B0:  MOVLW  D2
08B1:  BSF    03.6
08B2:  MOVWF  0D
08B3:  MOVLW  00
08B4:  MOVWF  0F
08B5:  BCF    0A.3
08B6:  BCF    03.6
08B7:  CALL   310
08B8:  BSF    0A.3
.................... lcd_gotoxy(1,1); 
08B9:  MOVLW  01
08BA:  MOVWF  61
08BB:  MOVWF  62
08BC:  BCF    0A.3
08BD:  CALL   2D2
08BE:  BSF    0A.3
.................... lcd_putc("* for up speed"); 
08BF:  MOVLW  D3
08C0:  BSF    03.6
08C1:  MOVWF  0D
08C2:  MOVLW  00
08C3:  MOVWF  0F
08C4:  BCF    0A.3
08C5:  BCF    03.6
08C6:  CALL   310
08C7:  BSF    0A.3
.................... lcd_gotoxy(1,2); 
08C8:  MOVLW  01
08C9:  MOVWF  61
08CA:  MOVLW  02
08CB:  MOVWF  62
08CC:  BCF    0A.3
08CD:  CALL   2D2
08CE:  BSF    0A.3
.................... lcd_putc("# for down speed "); 
08CF:  MOVLW  DB
08D0:  BSF    03.6
08D1:  MOVWF  0D
08D2:  MOVLW  00
08D3:  MOVWF  0F
08D4:  BCF    0A.3
08D5:  BCF    03.6
08D6:  CALL   310
08D7:  BSF    0A.3
.................... lcd_gotoxy(21,1); 
08D8:  MOVLW  15
08D9:  MOVWF  61
08DA:  MOVLW  01
08DB:  MOVWF  62
08DC:  BCF    0A.3
08DD:  CALL   2D2
08DE:  BSF    0A.3
.................... lcd_putc("0 for start"); 
08DF:  MOVLW  E4
08E0:  BSF    03.6
08E1:  MOVWF  0D
08E2:  MOVLW  00
08E3:  MOVWF  0F
08E4:  BCF    0A.3
08E5:  BCF    03.6
08E6:  CALL   310
08E7:  BSF    0A.3
.................... lcd_gotoxy(21,2); 
08E8:  MOVLW  15
08E9:  MOVWF  61
08EA:  MOVLW  02
08EB:  MOVWF  62
08EC:  BCF    0A.3
08ED:  CALL   2D2
08EE:  BSF    0A.3
.................... printf(lcd_putc,"PWM = %f ",pwm); 
08EF:  MOVLW  EA
08F0:  BSF    03.6
08F1:  MOVWF  0D
08F2:  MOVLW  00
08F3:  MOVWF  0F
08F4:  BCF    03.0
08F5:  MOVLW  06
08F6:  BCF    03.6
08F7:  MOVWF  41
08F8:  BCF    0A.3
08F9:  CALL   447
08FA:  BSF    0A.3
08FB:  MOVLW  89
08FC:  MOVWF  04
08FD:  MOVF   2E,W
08FE:  MOVWF  4A
08FF:  MOVF   2D,W
0900:  MOVWF  49
0901:  MOVF   2C,W
0902:  MOVWF  48
0903:  MOVF   2B,W
0904:  MOVWF  47
0905:  MOVLW  02
0906:  MOVWF  4B
0907:  BCF    0A.3
0908:  CALL   562
0909:  BSF    0A.3
090A:  MOVLW  20
090B:  MOVWF  60
090C:  BCF    0A.3
090D:  CALL   2E4
090E:  BSF    0A.3
.................... output_low(pin_c0); 
090F:  BCF    40.0
0910:  MOVF   40,W
0911:  BSF    03.5
0912:  MOVWF  07
0913:  BCF    03.5
0914:  BCF    07.0
.................... output_low(pin_c3); 
0915:  BCF    40.3
0916:  MOVF   40,W
0917:  BSF    03.5
0918:  MOVWF  07
0919:  BCF    03.5
091A:  BCF    07.3
.................... output_low(pin_c4); 
091B:  BCF    40.4
091C:  MOVF   40,W
091D:  BSF    03.5
091E:  MOVWF  07
091F:  BCF    03.5
0920:  BCF    07.4
.................... output_low(pin_c5); 
0921:  BCF    40.5
0922:  MOVF   40,W
0923:  BSF    03.5
0924:  MOVWF  07
0925:  BCF    03.5
0926:  BCF    07.5
.................... key(); 
0927:  BCF    0A.3
0928:  CALL   366
0929:  BSF    0A.3
.................... if (num=='*'){ 
092A:  MOVF   30,W
092B:  SUBLW  2A
092C:  BTFSS  03.2
092D:  GOTO   161
.................... pwm=pwm+1; 
092E:  BCF    03.1
092F:  MOVF   2E,W
0930:  MOVWF  44
0931:  MOVF   2D,W
0932:  MOVWF  43
0933:  MOVF   2C,W
0934:  MOVWF  42
0935:  MOVF   2B,W
0936:  MOVWF  41
0937:  CLRF   48
0938:  CLRF   47
0939:  CLRF   46
093A:  MOVLW  7F
093B:  MOVWF  45
093C:  BCF    0A.3
093D:  CALL   642
093E:  BSF    0A.3
093F:  MOVF   7A,W
0940:  MOVWF  2E
0941:  MOVF   79,W
0942:  MOVWF  2D
0943:  MOVF   78,W
0944:  MOVWF  2C
0945:  MOVF   77,W
0946:  MOVWF  2B
.................... if(pwm>1000)pwm=1000;} 
0947:  CLRF   44
0948:  CLRF   43
0949:  MOVLW  7A
094A:  MOVWF  42
094B:  MOVLW  88
094C:  MOVWF  41
094D:  MOVF   2E,W
094E:  MOVWF  48
094F:  MOVF   2D,W
0950:  MOVWF  47
0951:  MOVF   2C,W
0952:  MOVWF  46
0953:  MOVF   2B,W
0954:  MOVWF  45
0955:  BCF    0A.3
0956:  CALL   783
0957:  BSF    0A.3
0958:  BTFSS  03.0
0959:  GOTO   160
095A:  CLRF   2E
095B:  CLRF   2D
095C:  MOVLW  7A
095D:  MOVWF  2C
095E:  MOVLW  88
095F:  MOVWF  2B
0960:  GOTO   198
....................  
.................... else if (num=='#'){ 
0961:  MOVF   30,W
0962:  SUBLW  23
0963:  BTFSS  03.2
0964:  GOTO   194
.................... pwm=pwm-1; 
0965:  BSF    03.1
0966:  MOVF   2E,W
0967:  MOVWF  44
0968:  MOVF   2D,W
0969:  MOVWF  43
096A:  MOVF   2C,W
096B:  MOVWF  42
096C:  MOVF   2B,W
096D:  MOVWF  41
096E:  CLRF   48
096F:  CLRF   47
0970:  CLRF   46
0971:  MOVLW  7F
0972:  MOVWF  45
0973:  BCF    0A.3
0974:  CALL   642
0975:  BSF    0A.3
0976:  MOVF   7A,W
0977:  MOVWF  2E
0978:  MOVF   79,W
0979:  MOVWF  2D
097A:  MOVF   78,W
097B:  MOVWF  2C
097C:  MOVF   77,W
097D:  MOVWF  2B
.................... if(pwm<0)pwm=0;} 
097E:  MOVF   2E,W
097F:  MOVWF  44
0980:  MOVF   2D,W
0981:  MOVWF  43
0982:  MOVF   2C,W
0983:  MOVWF  42
0984:  MOVF   2B,W
0985:  MOVWF  41
0986:  CLRF   48
0987:  CLRF   47
0988:  CLRF   46
0989:  CLRF   45
098A:  BCF    0A.3
098B:  CALL   783
098C:  BSF    0A.3
098D:  BTFSS  03.0
098E:  GOTO   193
098F:  CLRF   2E
0990:  CLRF   2D
0991:  CLRF   2C
0992:  CLRF   2B
0993:  GOTO   198
....................  
.................... else if (num=='0'){ 
0994:  MOVF   30,W
0995:  SUBLW  30
0996:  BTFSC  03.2
.................... change_speed=0;} 
0997:  CLRF   38
0998:  GOTO   0AD
....................  
.................... } 
.................... lcd_putc("\f"); 
0999:  MOVLW  EF
099A:  BSF    03.6
099B:  MOVWF  0D
099C:  MOVLW  00
099D:  MOVWF  0F
099E:  BCF    0A.3
099F:  BCF    03.6
09A0:  CALL   310
09A1:  BSF    0A.3
.................... lcd_gotoxy(1,1); 
09A2:  MOVLW  01
09A3:  MOVWF  61
09A4:  MOVWF  62
09A5:  BCF    0A.3
09A6:  CALL   2D2
09A7:  BSF    0A.3
.................... seg=1; 
09A8:  MOVLW  01
09A9:  MOVWF  34
.................... start=1;} 
09AA:  MOVWF  33
09AB:  GOTO   1D4
....................  
....................  
.................... else{ 
.................... lcd_gotoxy(1,1); 
09AC:  MOVLW  01
09AD:  MOVWF  61
09AE:  MOVWF  62
09AF:  BCF    0A.3
09B0:  CALL   2D2
09B1:  BSF    0A.3
.................... lcd_putc("\f"); 
09B2:  MOVLW  F0
09B3:  BSF    03.6
09B4:  MOVWF  0D
09B5:  MOVLW  00
09B6:  MOVWF  0F
09B7:  BCF    0A.3
09B8:  BCF    03.6
09B9:  CALL   310
09BA:  BSF    0A.3
.................... lcd_putc("incorrect "); 
09BB:  MOVLW  F1
09BC:  BSF    03.6
09BD:  MOVWF  0D
09BE:  MOVLW  00
09BF:  MOVWF  0F
09C0:  BCF    0A.3
09C1:  BCF    03.6
09C2:  CALL   310
09C3:  BSF    0A.3
.................... lcd_gotoxy(1,2); 
09C4:  MOVLW  01
09C5:  MOVWF  61
09C6:  MOVLW  02
09C7:  MOVWF  62
09C8:  BCF    0A.3
09C9:  CALL   2D2
09CA:  BSF    0A.3
.................... lcd_putc("input ");} 
09CB:  MOVLW  F7
09CC:  BSF    03.6
09CD:  MOVWF  0D
09CE:  MOVLW  00
09CF:  MOVWF  0F
09D0:  BCF    0A.3
09D1:  BCF    03.6
09D2:  CALL   310
09D3:  BSF    0A.3
09D4:  GOTO   052
.................... } 
09D5:  BCF    0A.3
09D6:  BSF    0A.4
09D7:  GOTO   469 (RETURN)
.................... } 
....................  
....................  
....................  
.................... void stepper_move(short direction_){ 
....................   if(direction_){  
*
0BD7:  MOVF   41,F
0BD8:  BTFSC  03.2
0BD9:  GOTO   40B
....................    output_c(0b00011000); 
0BDA:  MOVLW  00
0BDB:  MOVWF  40
0BDC:  BSF    03.5
0BDD:  CLRF   07
0BDE:  MOVLW  18
0BDF:  BCF    03.5
0BE0:  MOVWF  07
....................    delay_ms(speed_); 
0BE1:  MOVF   2F,W
0BE2:  MOVWF  63
0BE3:  BCF    0A.3
0BE4:  CALL   1C1
0BE5:  BSF    0A.3
....................    output_c(0b00010001); 
0BE6:  MOVLW  00
0BE7:  MOVWF  40
0BE8:  BSF    03.5
0BE9:  CLRF   07
0BEA:  MOVLW  11
0BEB:  BCF    03.5
0BEC:  MOVWF  07
....................    delay_ms(speed_); 
0BED:  MOVF   2F,W
0BEE:  MOVWF  63
0BEF:  BCF    0A.3
0BF0:  CALL   1C1
0BF1:  BSF    0A.3
....................    output_c(0b00100001); 
0BF2:  MOVLW  00
0BF3:  MOVWF  40
0BF4:  BSF    03.5
0BF5:  CLRF   07
0BF6:  MOVLW  21
0BF7:  BCF    03.5
0BF8:  MOVWF  07
....................    delay_ms(speed_); 
0BF9:  MOVF   2F,W
0BFA:  MOVWF  63
0BFB:  BCF    0A.3
0BFC:  CALL   1C1
0BFD:  BSF    0A.3
....................    output_c(0b00101000); 
0BFE:  MOVLW  00
0BFF:  MOVWF  40
0C00:  BSF    03.5
0C01:  CLRF   07
0C02:  MOVLW  28
0C03:  BCF    03.5
0C04:  MOVWF  07
....................    delay_ms(speed_); 
0C05:  MOVF   2F,W
0C06:  MOVWF  63
0C07:  BCF    0A.3
0C08:  CALL   1C1
0C09:  BSF    0A.3
....................   } 
0C0A:  GOTO   43B
....................   else{ 
....................    output_c(0b00010001); 
0C0B:  MOVLW  00
0C0C:  MOVWF  40
0C0D:  BSF    03.5
0C0E:  CLRF   07
0C0F:  MOVLW  11
0C10:  BCF    03.5
0C11:  MOVWF  07
....................    delay_ms(speed_); 
0C12:  MOVF   2F,W
0C13:  MOVWF  63
0C14:  BCF    0A.3
0C15:  CALL   1C1
0C16:  BSF    0A.3
....................    output_c(0b00011000); 
0C17:  MOVLW  00
0C18:  MOVWF  40
0C19:  BSF    03.5
0C1A:  CLRF   07
0C1B:  MOVLW  18
0C1C:  BCF    03.5
0C1D:  MOVWF  07
....................    delay_ms(speed_); 
0C1E:  MOVF   2F,W
0C1F:  MOVWF  63
0C20:  BCF    0A.3
0C21:  CALL   1C1
0C22:  BSF    0A.3
....................    output_c(0b00101000); 
0C23:  MOVLW  00
0C24:  MOVWF  40
0C25:  BSF    03.5
0C26:  CLRF   07
0C27:  MOVLW  28
0C28:  BCF    03.5
0C29:  MOVWF  07
....................    delay_ms(speed_); 
0C2A:  MOVF   2F,W
0C2B:  MOVWF  63
0C2C:  BCF    0A.3
0C2D:  CALL   1C1
0C2E:  BSF    0A.3
....................    output_c(0b00100001); 
0C2F:  MOVLW  00
0C30:  MOVWF  40
0C31:  BSF    03.5
0C32:  CLRF   07
0C33:  MOVLW  21
0C34:  BCF    03.5
0C35:  MOVWF  07
....................    delay_ms(speed_); 
0C36:  MOVF   2F,W
0C37:  MOVWF  63
0C38:  BCF    0A.3
0C39:  CALL   1C1
0C3A:  BSF    0A.3
....................   } 
0C3B:  RETURN
.................... } 
....................  
....................  
.................... void stepper(){ 
....................   set_tris_c(0x00); 
0C3C:  MOVLW  00
0C3D:  BSF    03.5
0C3E:  MOVWF  07
0C3F:  BCF    03.5
0C40:  MOVWF  40
....................   setup_adc(ADC_CLOCK_DIV_32);      // Set ADC conversion time to 32Tosc 
0C41:  BSF    03.5
0C42:  BCF    1F.6
0C43:  BCF    03.5
0C44:  BCF    1F.6
0C45:  BSF    1F.7
0C46:  BSF    03.5
0C47:  BSF    1F.7
0C48:  BCF    03.5
0C49:  BSF    1F.0
....................   setup_adc_ports(A_analog);             // Configure AN0 as analog   
0C4A:  BSF    03.5
0C4B:  BCF    1F.0
0C4C:  BSF    1F.1
0C4D:  BCF    1F.2
0C4E:  BCF    1F.3
....................   set_adc_channel(2);               // Select channel 0 input 
0C4F:  MOVLW  10
0C50:  MOVWF  78
0C51:  BCF    03.5
0C52:  MOVF   1F,W
0C53:  ANDLW  C7
0C54:  IORWF  78,W
0C55:  MOVWF  1F
....................    
....................   delay_ms(100);                    // Wait 100ms 
0C56:  MOVLW  64
0C57:  MOVWF  63
0C58:  BCF    0A.3
0C59:  CALL   1C1
0C5A:  BSF    0A.3
....................   while(TRUE){ 
....................    output_high(pin_c1); 
0C5B:  BCF    40.1
0C5C:  MOVF   40,W
0C5D:  BSF    03.5
0C5E:  MOVWF  07
0C5F:  BCF    03.5
0C60:  BSF    07.1
....................    output_high(pin_c2); 
0C61:  BCF    40.2
0C62:  MOVF   40,W
0C63:  BSF    03.5
0C64:  MOVWF  07
0C65:  BCF    03.5
0C66:  BSF    07.2
....................    output_high(pin_d0); 
0C67:  BSF    03.5
0C68:  BCF    08.0
0C69:  BCF    03.5
0C6A:  BSF    08.0
....................    key(); 
0C6B:  BCF    0A.3
0C6C:  CALL   366
0C6D:  BSF    0A.3
....................   if(num=='1') 
0C6E:  MOVF   30,W
0C6F:  SUBLW  31
0C70:  BTFSS  03.2
0C71:  GOTO   482
....................   {speed_ = read_adc(); 
0C72:  BSF    1F.2
0C73:  BTFSC  1F.2
0C74:  GOTO   473
0C75:  BSF    03.5
0C76:  MOVF   1E,W
0C77:  BCF    03.5
0C78:  MOVWF  2F
....................     if(speed_ < 2) speed_ = 2; 
0C79:  MOVF   2F,W
0C7A:  SUBLW  01
0C7B:  BTFSS  03.0
0C7C:  GOTO   47F
0C7D:  MOVLW  02
0C7E:  MOVWF  2F
....................     stepper_move(0);} 
0C7F:  CLRF   41
0C80:  CALL   3D7
0C81:  GOTO   4AF
....................     else if(num=='2') 
0C82:  MOVF   30,W
0C83:  SUBLW  32
0C84:  BTFSS  03.2
0C85:  GOTO   497
....................    { speed_ = read_adc(); 
0C86:  BSF    1F.2
0C87:  BTFSC  1F.2
0C88:  GOTO   487
0C89:  BSF    03.5
0C8A:  MOVF   1E,W
0C8B:  BCF    03.5
0C8C:  MOVWF  2F
....................     if(speed_ < 2) speed_ = 2; 
0C8D:  MOVF   2F,W
0C8E:  SUBLW  01
0C8F:  BTFSS  03.0
0C90:  GOTO   493
0C91:  MOVLW  02
0C92:  MOVWF  2F
....................     stepper_move(1);} 
0C93:  MOVLW  01
0C94:  MOVWF  41
0C95:  CALL   3D7
0C96:  GOTO   4AF
....................     else{ 
....................     lcd_gotoxy(1,1); 
0C97:  MOVLW  01
0C98:  MOVWF  61
0C99:  MOVWF  62
0C9A:  BCF    0A.3
0C9B:  CALL   2D2
0C9C:  BSF    0A.3
.................... lcd_putc("\f"); 
0C9D:  MOVLW  FB
0C9E:  BSF    03.6
0C9F:  MOVWF  0D
0CA0:  MOVLW  00
0CA1:  MOVWF  0F
0CA2:  BCF    0A.3
0CA3:  BCF    03.6
0CA4:  CALL   310
0CA5:  BSF    0A.3
.................... lcd_putc("incorrect "); 
0CA6:  MOVLW  FC
0CA7:  BSF    03.6
0CA8:  MOVWF  0D
0CA9:  MOVLW  00
0CAA:  MOVWF  0F
0CAB:  BCF    0A.3
0CAC:  BCF    03.6
0CAD:  CALL   310
0CAE:  BSF    0A.3
.................... }  
0CAF:  GOTO   45B
....................    }} 
0CB0:  BCF    0A.3
0CB1:  BSF    0A.4
0CB2:  GOTO   4E9 (RETURN)
....................  
.................... void encoder(){ 
.................... t1=0; 
*
1163:  CLRF   3F
1164:  CLRF   3E
.................... setup_timer_1(t1_external|t1_div_by_4); 
1165:  MOVLW  A7
1166:  MOVWF  10
.................... set_timer1(65535); 
1167:  CLRF   0E
1168:  MOVLW  FF
1169:  MOVWF  0F
116A:  MOVWF  0E
.................... enable_interrupts(global);  
116B:  MOVLW  C0
116C:  IORWF  0B,F
.................... enable_interrupts(int_timer1); 
116D:  BSF    03.5
116E:  BSF    0C.0
.................... while(TRUE){ 
.................... lcd_gotoxy(1,1); 
116F:  MOVLW  01
1170:  BCF    03.5
1171:  MOVWF  61
1172:  MOVWF  62
1173:  BCF    0A.4
1174:  CALL   2D2
1175:  BSF    0A.4
.................... lcd_putc("\f"); 
1176:  MOVLW  02
1177:  BSF    03.6
1178:  MOVWF  0D
1179:  MOVLW  01
117A:  MOVWF  0F
117B:  BCF    0A.4
117C:  BCF    03.6
117D:  CALL   310
117E:  BSF    0A.4
.................... printf(lcd_putc,"counter = %lu",t1); 
117F:  MOVLW  03
1180:  BSF    03.6
1181:  MOVWF  0D
1182:  MOVLW  01
1183:  MOVWF  0F
1184:  BCF    03.0
1185:  MOVLW  0A
1186:  BCF    03.6
1187:  MOVWF  41
1188:  BCF    0A.4
1189:  CALL   447
118A:  BSF    0A.4
118B:  MOVLW  10
118C:  MOVWF  04
118D:  MOVF   3F,W
118E:  MOVWF  44
118F:  MOVF   3E,W
1190:  MOVWF  43
1191:  BCF    0A.4
1192:  BSF    0A.3
1193:  CALL   4B3
1194:  BSF    0A.4
1195:  BCF    0A.3
.................... delay_ms(100); 
1196:  MOVLW  64
1197:  MOVWF  63
1198:  BCF    0A.4
1199:  CALL   1C1
119A:  BSF    0A.4
119B:  BSF    03.5
119C:  GOTO   16F
....................  
.................... }} 
119D:  BCF    03.5
119E:  BCF    0A.3
119F:  BSF    0A.4
11A0:  GOTO   581 (RETURN)
....................  
....................  
.................... void leds(){ 
11A1:  MOVLW  01
11A2:  MOVWF  41
11A3:  MOVWF  42
.................... int C1=1,con=1; 
.................... set_tris_e(0x00); 
11A4:  BSF    03.5
11A5:  BCF    09.0
11A6:  BCF    09.1
11A7:  BCF    09.2
.................... while(TRUE){ 
.................... if(C1<9 & con){ 
11A8:  BCF    03.5
11A9:  MOVF   41,W
11AA:  SUBLW  08
11AB:  BTFSC  03.0
11AC:  GOTO   1AF
11AD:  MOVLW  00
11AE:  GOTO   1B0
11AF:  MOVLW  01
11B0:  ANDWF  42,W
11B1:  BTFSC  03.2
11B2:  GOTO   1BD
.................... C1++; output_high(pin_e2);  
11B3:  INCF   41,F
11B4:  BSF    03.5
11B5:  BCF    09.2
11B6:  BCF    03.5
11B7:  BSF    09.2
.................... if (C1>=9)con=0;} 
11B8:  MOVF   41,W
11B9:  SUBLW  08
11BA:  BTFSS  03.0
11BB:  CLRF   42
11BC:  GOTO   1DA
.................... else if (C1>=9 & !con ) 
11BD:  MOVF   41,W
11BE:  SUBLW  08
11BF:  BTFSS  03.0
11C0:  GOTO   1C3
11C1:  MOVLW  00
11C2:  GOTO   1C4
11C3:  MOVLW  01
11C4:  MOVWF  43
11C5:  MOVF   42,F
11C6:  BTFSC  03.2
11C7:  GOTO   1CA
11C8:  MOVLW  00
11C9:  GOTO   1CB
11CA:  MOVLW  01
11CB:  ANDWF  43,W
11CC:  BTFSC  03.2
11CD:  GOTO   1DA
.................... {C1++; output_low(pin_e2); 
11CE:  INCF   41,F
11CF:  BSF    03.5
11D0:  BCF    09.2
11D1:  BCF    03.5
11D2:  BCF    09.2
.................... if (C1<18){con=1; C1=1;}} 
11D3:  MOVF   41,W
11D4:  SUBLW  11
11D5:  BTFSS  03.0
11D6:  GOTO   1DA
11D7:  MOVLW  01
11D8:  MOVWF  42
11D9:  MOVWF  41
....................  
.................... output_high(pin_e1); 
11DA:  BSF    03.5
11DB:  BCF    09.1
11DC:  BCF    03.5
11DD:  BSF    09.1
.................... delay_ms(500); 
11DE:  MOVLW  02
11DF:  MOVWF  43
11E0:  MOVLW  FA
11E1:  MOVWF  63
11E2:  BCF    0A.4
11E3:  CALL   1C1
11E4:  BSF    0A.4
11E5:  DECFSZ 43,F
11E6:  GOTO   1E0
.................... output_low(pin_e1); 
11E7:  BSF    03.5
11E8:  BCF    09.1
11E9:  BCF    03.5
11EA:  BCF    09.1
.................... delay_ms(500); 
11EB:  MOVLW  02
11EC:  MOVWF  43
11ED:  MOVLW  FA
11EE:  MOVWF  63
11EF:  BCF    0A.4
11F0:  CALL   1C1
11F1:  BSF    0A.4
11F2:  DECFSZ 43,F
11F3:  GOTO   1ED
11F4:  GOTO   1A9
....................  
....................    
.................... }} 
11F5:  BCF    0A.3
11F6:  BSF    0A.4
11F7:  GOTO   596 (RETURN)
....................  
.................... void uart(){ 
.................... #use rs232(uart1, baud = 9600)                // Initialize UART module 
....................   
....................   putc(13);                                   // Go to first column 
*
1250:  MOVLW  0D
1251:  BTFSS  0C.4
1252:  GOTO   251
1253:  MOVWF  19
....................   printf("Hi ");                              // UART write 
1254:  MOVLW  48
1255:  BTFSS  0C.4
1256:  GOTO   255
1257:  MOVWF  19
1258:  MOVLW  69
1259:  BTFSS  0C.4
125A:  GOTO   259
125B:  MOVWF  19
125C:  MOVLW  20
125D:  BTFSS  0C.4
125E:  GOTO   25D
125F:  MOVWF  19
....................   delay_ms(2000);                             // Wait 5 seconds 
1260:  MOVLW  08
1261:  MOVWF  41
1262:  MOVLW  FA
1263:  MOVWF  63
1264:  BCF    0A.4
1265:  CALL   1C1
1266:  BSF    0A.4
1267:  DECFSZ 41,F
1268:  GOTO   262
....................   putc(13);                                   // Go to first column 
1269:  MOVLW  0D
126A:  BTFSS  0C.4
126B:  GOTO   26A
126C:  MOVWF  19
....................   putc(10);                                   // Start a new line 
126D:  MOVLW  0A
126E:  BTFSS  0C.4
126F:  GOTO   26E
1270:  MOVWF  19
....................   printf("PIC16F877A UART example");          // UART Write 
1271:  MOVLW  0A
1272:  BSF    03.6
1273:  MOVWF  0D
1274:  MOVLW  01
1275:  MOVWF  0F
1276:  BCF    03.6
1277:  CALL   1F8
....................   delay_ms(2000);  
1278:  MOVLW  08
1279:  MOVWF  41
127A:  MOVLW  FA
127B:  MOVWF  63
127C:  BCF    0A.4
127D:  CALL   1C1
127E:  BSF    0A.4
127F:  DECFSZ 41,F
1280:  GOTO   27A
....................   putc(13); 
1281:  MOVLW  0D
1282:  BTFSS  0C.4
1283:  GOTO   282
1284:  MOVWF  19
....................   putc(10);  
1285:  MOVLW  0A
1286:  BTFSS  0C.4
1287:  GOTO   286
1288:  MOVWF  19
....................   printf("I hope this board  benefit you");  
1289:  MOVLW  16
128A:  BSF    03.6
128B:  MOVWF  0D
128C:  MOVLW  01
128D:  MOVWF  0F
128E:  BCF    03.6
128F:  CALL   1F8
1290:  BCF    0A.3
1291:  BSF    0A.4
1292:  GOTO   5AB (RETURN)
....................    
....................   } 
....................    
.................... void main(){ 
1293:  MOVF   03,W
1294:  ANDLW  1F
1295:  MOVWF  03
1296:  CLRF   2E
1297:  CLRF   2D
1298:  MOVLW  7A
1299:  MOVWF  2C
129A:  MOVLW  87
129B:  MOVWF  2B
129C:  MOVLW  40
129D:  MOVWF  30
129E:  MOVLW  32
129F:  MOVWF  31
12A0:  CLRF   33
12A1:  CLRF   34
12A2:  CLRF   35
12A3:  CLRF   36
12A4:  CLRF   37
12A5:  CLRF   38
12A6:  MOVLW  FF
12A7:  MOVWF  40
12A8:  MOVLW  19
12A9:  BSF    03.5
12AA:  MOVWF  19
12AB:  MOVLW  A6
12AC:  MOVWF  18
12AD:  MOVLW  90
12AE:  BCF    03.5
12AF:  MOVWF  18
12B0:  BSF    03.5
12B1:  BSF    1F.0
12B2:  BSF    1F.1
12B3:  BSF    1F.2
12B4:  BCF    1F.3
12B5:  MOVLW  07
12B6:  MOVWF  1C
12B7:  BCF    03.7
....................  
.................... lcd_init(); 
12B8:  BCF    0A.4
12B9:  BCF    03.5
12BA:  CALL   28E
12BB:  BSF    0A.4
.................... set_tris_d(0x00); 
12BC:  MOVLW  00
12BD:  BSF    03.5
12BE:  MOVWF  08
.................... set_tris_c(0x00); 
12BF:  MOVWF  07
12C0:  BCF    03.5
12C1:  MOVWF  40
.................... set_tris_e(0x00); 
12C2:  BSF    03.5
12C3:  BCF    09.0
12C4:  BCF    09.1
12C5:  BCF    09.2
.................... set_tris_b(0x01); 
12C6:  MOVLW  01
12C7:  MOVWF  06
.................... set_tris_a(0x0f); 
12C8:  MOVLW  0F
12C9:  MOVWF  05
.................... home: 
.................... output_high(pin_b0); 
12CA:  BCF    06.0
12CB:  BCF    03.5
12CC:  BSF    06.0
.................... delay_ms(500); 
12CD:  MOVLW  02
12CE:  MOVWF  41
12CF:  MOVLW  FA
12D0:  MOVWF  63
12D1:  BCF    0A.4
12D2:  CALL   1C1
12D3:  BSF    0A.4
12D4:  DECFSZ 41,F
12D5:  GOTO   2CF
.................... output_low(pin_b0); 
12D6:  BSF    03.5
12D7:  BCF    06.0
12D8:  BCF    03.5
12D9:  BCF    06.0
.................... output_low(pin_b1); 
12DA:  BSF    03.5
12DB:  BCF    06.1
12DC:  BCF    03.5
12DD:  BCF    06.1
.................... output_low(pin_b2); 
12DE:  BSF    03.5
12DF:  BCF    06.2
12E0:  BCF    03.5
12E1:  BCF    06.2
.................... output_low(pin_b3); 
12E2:  BSF    03.5
12E3:  BCF    06.3
12E4:  BCF    03.5
12E5:  BCF    06.3
.................... output_low(pin_b4); 
12E6:  BSF    03.5
12E7:  BCF    06.4
12E8:  BCF    03.5
12E9:  BCF    06.4
.................... output_low(pin_b5); 
12EA:  BSF    03.5
12EB:  BCF    06.5
12EC:  BCF    03.5
12ED:  BCF    06.5
.................... output_low(pin_b6); 
12EE:  BSF    03.5
12EF:  BCF    06.6
12F0:  BCF    03.5
12F1:  BCF    06.6
.................... output_low(pin_b7); 
12F2:  BSF    03.5
12F3:  BCF    06.7
12F4:  BCF    03.5
12F5:  BCF    06.7
.................... output_low(pin_c0); 
12F6:  BCF    40.0
12F7:  MOVF   40,W
12F8:  BSF    03.5
12F9:  MOVWF  07
12FA:  BCF    03.5
12FB:  BCF    07.0
.................... output_low(pin_c1); 
12FC:  BCF    40.1
12FD:  MOVF   40,W
12FE:  BSF    03.5
12FF:  MOVWF  07
1300:  BCF    03.5
1301:  BCF    07.1
.................... output_low(pin_c2); 
1302:  BCF    40.2
1303:  MOVF   40,W
1304:  BSF    03.5
1305:  MOVWF  07
1306:  BCF    03.5
1307:  BCF    07.2
.................... output_low(pin_c3); 
1308:  BCF    40.3
1309:  MOVF   40,W
130A:  BSF    03.5
130B:  MOVWF  07
130C:  BCF    03.5
130D:  BCF    07.3
.................... output_low(pin_c4); 
130E:  BCF    40.4
130F:  MOVF   40,W
1310:  BSF    03.5
1311:  MOVWF  07
1312:  BCF    03.5
1313:  BCF    07.4
.................... output_low(pin_c5); 
1314:  BCF    40.5
1315:  MOVF   40,W
1316:  BSF    03.5
1317:  MOVWF  07
1318:  BCF    03.5
1319:  BCF    07.5
.................... output_low(pin_d1); 
131A:  BSF    03.5
131B:  BCF    08.1
131C:  BCF    03.5
131D:  BCF    08.1
.................... output_low(pin_d2); 
131E:  BSF    03.5
131F:  BCF    08.2
1320:  BCF    03.5
1321:  BCF    08.2
.................... output_low(pin_d3); 
1322:  BSF    03.5
1323:  BCF    08.3
1324:  BCF    03.5
1325:  BCF    08.3
.................... output_low(pin_d4); 
1326:  BSF    03.5
1327:  BCF    08.4
1328:  BCF    03.5
1329:  BCF    08.4
.................... output_low(pin_d5); 
132A:  BSF    03.5
132B:  BCF    08.5
132C:  BCF    03.5
132D:  BCF    08.5
.................... output_low(pin_d6); 
132E:  BSF    03.5
132F:  BCF    08.6
1330:  BCF    03.5
1331:  BCF    08.6
.................... output_low(pin_d7); 
1332:  BSF    03.5
1333:  BCF    08.7
1334:  BCF    03.5
1335:  BCF    08.7
.................... output_low(pin_e0); 
1336:  BSF    03.5
1337:  BCF    09.0
1338:  BCF    03.5
1339:  BCF    09.0
.................... output_low(pin_e1); 
133A:  BSF    03.5
133B:  BCF    09.1
133C:  BCF    03.5
133D:  BCF    09.1
.................... output_low(pin_e2); 
133E:  BSF    03.5
133F:  BCF    09.2
1340:  BCF    03.5
1341:  BCF    09.2
.................... output_high(pin_d0); 
1342:  BSF    03.5
1343:  BCF    08.0
1344:  BCF    03.5
1345:  BSF    08.0
.................... delay_ms(5); 
1346:  MOVLW  05
1347:  MOVWF  63
1348:  BCF    0A.4
1349:  CALL   1C1
134A:  BSF    0A.4
.................... output_low(pin_d0); 
134B:  BSF    03.5
134C:  BCF    08.0
134D:  BCF    03.5
134E:  BCF    08.0
.................... enable_interrupts(global); 
134F:  MOVLW  C0
1350:  IORWF  0B,F
.................... enable_interrupts(int_ext); 
1351:  BSF    0B.4
.................... ext_int_edge(l_to_h); 
1352:  BSF    03.5
1353:  BSF    01.6
....................  
.................... lcd_gotoxy(1,1); 
1354:  MOVLW  01
1355:  BCF    03.5
1356:  MOVWF  61
1357:  MOVWF  62
1358:  BCF    0A.4
1359:  CALL   2D2
135A:  BSF    0A.4
.................... lcd_putc("enter a number to "); 
135B:  MOVLW  26
135C:  BSF    03.6
135D:  MOVWF  0D
135E:  MOVLW  01
135F:  MOVWF  0F
1360:  BCF    0A.4
1361:  BCF    03.6
1362:  CALL   310
1363:  BSF    0A.4
.................... lcd_gotoxy(1,2); 
1364:  MOVLW  01
1365:  MOVWF  61
1366:  MOVLW  02
1367:  MOVWF  62
1368:  BCF    0A.4
1369:  CALL   2D2
136A:  BSF    0A.4
.................... lcd_putc("choose a func "); 
136B:  MOVLW  30
136C:  BSF    03.6
136D:  MOVWF  0D
136E:  MOVLW  01
136F:  MOVWF  0F
1370:  BCF    0A.4
1371:  BCF    03.6
1372:  CALL   310
1373:  BSF    0A.4
.................... delay_ms(1000); 
1374:  MOVLW  04
1375:  MOVWF  41
1376:  MOVLW  FA
1377:  MOVWF  63
1378:  BCF    0A.4
1379:  CALL   1C1
137A:  BSF    0A.4
137B:  DECFSZ 41,F
137C:  GOTO   376
.................... lcd_gotoxy(1,1); 
137D:  MOVLW  01
137E:  MOVWF  61
137F:  MOVWF  62
1380:  BCF    0A.4
1381:  CALL   2D2
1382:  BSF    0A.4
.................... lcd_putc("\f"); 
1383:  MOVLW  38
1384:  BSF    03.6
1385:  MOVWF  0D
1386:  MOVLW  01
1387:  MOVWF  0F
1388:  BCF    0A.4
1389:  BCF    03.6
138A:  CALL   310
138B:  BSF    0A.4
.................... lcd_putc("(1) motors "); 
138C:  MOVLW  39
138D:  BSF    03.6
138E:  MOVWF  0D
138F:  MOVLW  01
1390:  MOVWF  0F
1391:  BCF    0A.4
1392:  BCF    03.6
1393:  CALL   310
1394:  BSF    0A.4
.................... lcd_gotoxy(1,2); 
1395:  MOVLW  01
1396:  MOVWF  61
1397:  MOVLW  02
1398:  MOVWF  62
1399:  BCF    0A.4
139A:  CALL   2D2
139B:  BSF    0A.4
.................... lcd_putc("(2) sensors"); 
139C:  MOVLW  3F
139D:  BSF    03.6
139E:  MOVWF  0D
139F:  MOVLW  01
13A0:  MOVWF  0F
13A1:  BCF    0A.4
13A2:  BCF    03.6
13A3:  CALL   310
13A4:  BSF    0A.4
.................... lcd_gotoxy(21,1); 
13A5:  MOVLW  15
13A6:  MOVWF  61
13A7:  MOVLW  01
13A8:  MOVWF  62
13A9:  BCF    0A.4
13AA:  CALL   2D2
13AB:  BSF    0A.4
.................... lcd_putc("(3) encoder"); 
13AC:  MOVLW  45
13AD:  BSF    03.6
13AE:  MOVWF  0D
13AF:  MOVLW  01
13B0:  MOVWF  0F
13B1:  BCF    0A.4
13B2:  BCF    03.6
13B3:  CALL   310
13B4:  BSF    0A.4
.................... lcd_gotoxy(21,2); 
13B5:  MOVLW  15
13B6:  MOVWF  61
13B7:  MOVLW  02
13B8:  MOVWF  62
13B9:  BCF    0A.4
13BA:  CALL   2D2
13BB:  BSF    0A.4
.................... lcd_putc("(4) leds   (5) uart"); 
13BC:  MOVLW  4B
13BD:  BSF    03.6
13BE:  MOVWF  0D
13BF:  MOVLW  01
13C0:  MOVWF  0F
13C1:  BCF    0A.4
13C2:  BCF    03.6
13C3:  CALL   310
13C4:  BSF    0A.4
.................... delay_ms(500); 
13C5:  MOVLW  02
13C6:  MOVWF  41
13C7:  MOVLW  FA
13C8:  MOVWF  63
13C9:  BCF    0A.4
13CA:  CALL   1C1
13CB:  BSF    0A.4
13CC:  DECFSZ 41,F
13CD:  GOTO   3C7
....................  
....................  
.................... key(); 
13CE:  BCF    0A.4
13CF:  CALL   366
13D0:  BSF    0A.4
....................  
....................  
.................... if(num=='1'){  //motors  
13D1:  MOVF   30,W
13D2:  SUBLW  31
13D3:  BTFSS  03.2
13D4:  GOTO   4EC
....................  output_low(pin_c0); 
13D5:  BCF    40.0
13D6:  MOVF   40,W
13D7:  BSF    03.5
13D8:  MOVWF  07
13D9:  BCF    03.5
13DA:  BCF    07.0
....................     output_low(pin_c3); 
13DB:  BCF    40.3
13DC:  MOVF   40,W
13DD:  BSF    03.5
13DE:  MOVWF  07
13DF:  BCF    03.5
13E0:  BCF    07.3
....................         output_low(pin_c4); 
13E1:  BCF    40.4
13E2:  MOVF   40,W
13E3:  BSF    03.5
13E4:  MOVWF  07
13E5:  BCF    03.5
13E6:  BCF    07.4
....................     output_low(pin_c5); 
13E7:  BCF    40.5
13E8:  MOVF   40,W
13E9:  BSF    03.5
13EA:  MOVWF  07
13EB:  BCF    03.5
13EC:  BCF    07.5
....................      output_high(pin_e1); 
13ED:  BSF    03.5
13EE:  BCF    09.1
13EF:  BCF    03.5
13F0:  BSF    09.1
.................... lcd_gotoxy(1,1); 
13F1:  MOVLW  01
13F2:  MOVWF  61
13F3:  MOVWF  62
13F4:  BCF    0A.4
13F5:  CALL   2D2
13F6:  BSF    0A.4
.................... lcd_putc("\f"); 
13F7:  MOVLW  55
13F8:  BSF    03.6
13F9:  MOVWF  0D
13FA:  MOVLW  01
13FB:  MOVWF  0F
13FC:  BCF    0A.4
13FD:  BCF    03.6
13FE:  CALL   310
13FF:  BSF    0A.4
.................... lcd_putc("(1) DC motor "); 
1400:  MOVLW  56
1401:  BSF    03.6
1402:  MOVWF  0D
1403:  MOVLW  01
1404:  MOVWF  0F
1405:  BCF    0A.4
1406:  BCF    03.6
1407:  CALL   310
1408:  BSF    0A.4
.................... lcd_gotoxy(1,2); 
1409:  MOVLW  01
140A:  MOVWF  61
140B:  MOVLW  02
140C:  MOVWF  62
140D:  BCF    0A.4
140E:  CALL   2D2
140F:  BSF    0A.4
.................... lcd_putc("(2) Stepper "); 
1410:  MOVLW  5D
1411:  BSF    03.6
1412:  MOVWF  0D
1413:  MOVLW  01
1414:  MOVWF  0F
1415:  BCF    0A.4
1416:  BCF    03.6
1417:  CALL   310
1418:  BSF    0A.4
....................  
.................... delay_ms(100); 
1419:  MOVLW  64
141A:  MOVWF  63
141B:  BCF    0A.4
141C:  CALL   1C1
141D:  BSF    0A.4
.................... key(); 
141E:  BCF    0A.4
141F:  CALL   366
1420:  BSF    0A.4
....................   
.................... if(num=='1')   
1421:  MOVF   30,W
1422:  SUBLW  31
1423:  BTFSS  03.2
1424:  GOTO   4B6
.................... { 
....................  
.................... lcd_gotoxy(1,1); 
1425:  MOVLW  01
1426:  MOVWF  61
1427:  MOVWF  62
1428:  BCF    0A.4
1429:  CALL   2D2
142A:  BSF    0A.4
.................... lcd_putc("\f"); 
142B:  MOVLW  64
142C:  BSF    03.6
142D:  MOVWF  0D
142E:  MOVLW  01
142F:  MOVWF  0F
1430:  BCF    0A.4
1431:  BCF    03.6
1432:  CALL   310
1433:  BSF    0A.4
.................... lcd_putc(" Do you want time ? \n "); 
1434:  MOVLW  65
1435:  BSF    03.6
1436:  MOVWF  0D
1437:  MOVLW  01
1438:  MOVWF  0F
1439:  BCF    0A.4
143A:  BCF    03.6
143B:  CALL   310
143C:  BSF    0A.4
.................... lcd_gotoxy(21,1); 
143D:  MOVLW  15
143E:  MOVWF  61
143F:  MOVLW  01
1440:  MOVWF  62
1441:  BCF    0A.4
1442:  CALL   2D2
1443:  BSF    0A.4
.................... lcd_putc("1) yes"); 
1444:  MOVLW  71
1445:  BSF    03.6
1446:  MOVWF  0D
1447:  MOVLW  01
1448:  MOVWF  0F
1449:  BCF    0A.4
144A:  BCF    03.6
144B:  CALL   310
144C:  BSF    0A.4
.................... lcd_gotoxy(21,2); 
144D:  MOVLW  15
144E:  MOVWF  61
144F:  MOVLW  02
1450:  MOVWF  62
1451:  BCF    0A.4
1452:  CALL   2D2
1453:  BSF    0A.4
.................... lcd_putc("2) no"); 
1454:  MOVLW  75
1455:  BSF    03.6
1456:  MOVWF  0D
1457:  MOVLW  01
1458:  MOVWF  0F
1459:  BCF    0A.4
145A:  BCF    03.6
145B:  CALL   310
145C:  BSF    0A.4
.................... key(); 
145D:  BCF    0A.4
145E:  CALL   366
145F:  BSF    0A.4
.................... if(num=='1') 
1460:  MOVF   30,W
1461:  SUBLW  31
1462:  BTFSS  03.2
1463:  GOTO   471
.................... {with_time=1;segment(); 
1464:  MOVLW  01
1465:  MOVWF  37
1466:  BCF    0A.4
1467:  BSF    0A.3
1468:  GOTO   000
1469:  BSF    0A.4
146A:  BCF    0A.3
.................... dc();} 
146B:  BCF    0A.4
146C:  BSF    0A.3
146D:  CALL   1D8
146E:  BSF    0A.4
146F:  BCF    0A.3
1470:  GOTO   4B5
.................... else if(num=='2') 
1471:  MOVF   30,W
1472:  SUBLW  32
1473:  BTFSS  03.2
1474:  GOTO   48D
.................... { 
.................... lcd_gotoxy(1,1); 
1475:  MOVLW  01
1476:  MOVWF  61
1477:  MOVWF  62
1478:  BCF    0A.4
1479:  CALL   2D2
147A:  BSF    0A.4
.................... lcd_putc("\f"); 
147B:  MOVLW  78
147C:  BSF    03.6
147D:  MOVWF  0D
147E:  MOVLW  01
147F:  MOVWF  0F
1480:  BCF    0A.4
1481:  BCF    03.6
1482:  CALL   310
1483:  BSF    0A.4
.................... no_time=1; seg=1; 
1484:  MOVLW  01
1485:  MOVWF  36
1486:  MOVWF  34
.................... dc();} 
1487:  BCF    0A.4
1488:  BSF    0A.3
1489:  CALL   1D8
148A:  BSF    0A.4
148B:  BCF    0A.3
148C:  GOTO   4B5
.................... else  
.................... { 
.................... lcd_gotoxy(1,1); 
148D:  MOVLW  01
148E:  MOVWF  61
148F:  MOVWF  62
1490:  BCF    0A.4
1491:  CALL   2D2
1492:  BSF    0A.4
.................... lcd_putc("\f"); 
1493:  MOVLW  79
1494:  BSF    03.6
1495:  MOVWF  0D
1496:  MOVLW  01
1497:  MOVWF  0F
1498:  BCF    0A.4
1499:  BCF    03.6
149A:  CALL   310
149B:  BSF    0A.4
.................... lcd_putc("incorrect "); 
149C:  MOVLW  7A
149D:  BSF    03.6
149E:  MOVWF  0D
149F:  MOVLW  01
14A0:  MOVWF  0F
14A1:  BCF    0A.4
14A2:  BCF    03.6
14A3:  CALL   310
14A4:  BSF    0A.4
.................... lcd_gotoxy(1,2); 
14A5:  MOVLW  01
14A6:  MOVWF  61
14A7:  MOVLW  02
14A8:  MOVWF  62
14A9:  BCF    0A.4
14AA:  CALL   2D2
14AB:  BSF    0A.4
.................... lcd_putc("input ");} 
14AC:  MOVLW  80
14AD:  BSF    03.6
14AE:  MOVWF  0D
14AF:  MOVLW  01
14B0:  MOVWF  0F
14B1:  BCF    0A.4
14B2:  BCF    03.6
14B3:  CALL   310
14B4:  BSF    0A.4
.................... } 
14B5:  GOTO   4EB
....................  
.................... else if(num=='2'){ //stepper 
14B6:  MOVF   30,W
14B7:  SUBLW  32
14B8:  BTFSS  03.2
14B9:  GOTO   4EB
....................  
.................... output_high(pin_d0); 
14BA:  BSF    03.5
14BB:  BCF    08.0
14BC:  BCF    03.5
14BD:  BSF    08.0
.................... lcd_gotoxy(1,1); 
14BE:  MOVLW  01
14BF:  MOVWF  61
14C0:  MOVWF  62
14C1:  BCF    0A.4
14C2:  CALL   2D2
14C3:  BSF    0A.4
.................... lcd_putc("\f"); 
14C4:  MOVLW  84
14C5:  BSF    03.6
14C6:  MOVWF  0D
14C7:  MOVLW  01
14C8:  MOVWF  0F
14C9:  BCF    0A.4
14CA:  BCF    03.6
14CB:  CALL   310
14CC:  BSF    0A.4
.................... lcd_putc("1) first direction"); 
14CD:  MOVLW  85
14CE:  BSF    03.6
14CF:  MOVWF  0D
14D0:  MOVLW  01
14D1:  MOVWF  0F
14D2:  BCF    0A.4
14D3:  BCF    03.6
14D4:  CALL   310
14D5:  BSF    0A.4
.................... lcd_gotoxy(21,1); 
14D6:  MOVLW  15
14D7:  MOVWF  61
14D8:  MOVLW  01
14D9:  MOVWF  62
14DA:  BCF    0A.4
14DB:  CALL   2D2
14DC:  BSF    0A.4
.................... lcd_putc("2) second direction"); 
14DD:  MOVLW  8F
14DE:  BSF    03.6
14DF:  MOVWF  0D
14E0:  MOVLW  01
14E1:  MOVWF  0F
14E2:  BCF    0A.4
14E3:  BCF    03.6
14E4:  CALL   310
14E5:  BSF    0A.4
.................... stepper(); 
14E6:  BCF    0A.4
14E7:  BSF    0A.3
14E8:  GOTO   43C
14E9:  BSF    0A.4
14EA:  BCF    0A.3
.................... } 
.................... } 
14EB:  GOTO   5D9
....................  
....................  
.................... else if(num=='2'){  //sensors 
14EC:  MOVF   30,W
14ED:  SUBLW  32
14EE:  BTFSS  03.2
14EF:  GOTO   56D
....................  
.................... lcd_gotoxy(1,1); 
14F0:  MOVLW  01
14F1:  MOVWF  61
14F2:  MOVWF  62
14F3:  BCF    0A.4
14F4:  CALL   2D2
14F5:  BSF    0A.4
.................... lcd_putc("\f"); 
14F6:  MOVLW  99
14F7:  BSF    03.6
14F8:  MOVWF  0D
14F9:  MOVLW  01
14FA:  MOVWF  0F
14FB:  BCF    0A.4
14FC:  BCF    03.6
14FD:  CALL   310
14FE:  BSF    0A.4
.................... lcd_putc("(1)  ultra sonick "); 
14FF:  MOVLW  9A
1500:  BSF    03.6
1501:  MOVWF  0D
1502:  MOVLW  01
1503:  MOVWF  0F
1504:  BCF    0A.4
1505:  BCF    03.6
1506:  CALL   310
1507:  BSF    0A.4
.................... delay_ms(10); 
1508:  MOVLW  0A
1509:  MOVWF  63
150A:  BCF    0A.4
150B:  CALL   1C1
150C:  BSF    0A.4
.................... lcd_gotoxy(1,2); 
150D:  MOVLW  01
150E:  MOVWF  61
150F:  MOVLW  02
1510:  MOVWF  62
1511:  BCF    0A.4
1512:  CALL   2D2
1513:  BSF    0A.4
.................... lcd_putc("(2)lm35"); 
1514:  MOVLW  A4
1515:  BSF    03.6
1516:  MOVWF  0D
1517:  MOVLW  01
1518:  MOVWF  0F
1519:  BCF    0A.4
151A:  BCF    03.6
151B:  CALL   310
151C:  BSF    0A.4
.................... delay_ms(10); 
151D:  MOVLW  0A
151E:  MOVWF  63
151F:  BCF    0A.4
1520:  CALL   1C1
1521:  BSF    0A.4
.................... lcd_gotoxy(21,1); 
1522:  MOVLW  15
1523:  MOVWF  61
1524:  MOVLW  01
1525:  MOVWF  62
1526:  BCF    0A.4
1527:  CALL   2D2
1528:  BSF    0A.4
.................... lcd_putc("(3) pot"); 
1529:  MOVLW  A8
152A:  BSF    03.6
152B:  MOVWF  0D
152C:  MOVLW  01
152D:  MOVWF  0F
152E:  BCF    0A.4
152F:  BCF    03.6
1530:  CALL   310
1531:  BSF    0A.4
.................... delay_ms(10); 
1532:  MOVLW  0A
1533:  MOVWF  63
1534:  BCF    0A.4
1535:  CALL   1C1
1536:  BSF    0A.4
.................... key(); 
1537:  BCF    0A.4
1538:  CALL   366
1539:  BSF    0A.4
.................... if(num=='1') // ultra sonick 
153A:  MOVF   30,W
153B:  SUBLW  31
153C:  BTFSS  03.2
153D:  GOTO   544
.................... ultra_sonick(); 
153E:  BCF    0A.4
153F:  BSF    0A.3
1540:  GOTO   518
1541:  BSF    0A.4
1542:  BCF    0A.3
1543:  GOTO   56C
.................... else if(num=='2') // LM35 
1544:  MOVF   30,W
1545:  SUBLW  32
1546:  BTFSS  03.2
1547:  GOTO   54A
.................... lm35(); 
1548:  GOTO   000
1549:  GOTO   56C
.................... else if(num=='3') // pot 
154A:  MOVF   30,W
154B:  SUBLW  33
154C:  BTFSS  03.2
154D:  GOTO   554
.................... pot(); 
154E:  BCF    0A.4
154F:  BSF    0A.3
1550:  GOTO   736
1551:  BSF    0A.4
1552:  BCF    0A.3
1553:  GOTO   56C
.................... else { 
.................... lcd_gotoxy(1,1); 
1554:  MOVLW  01
1555:  MOVWF  61
1556:  MOVWF  62
1557:  BCF    0A.4
1558:  CALL   2D2
1559:  BSF    0A.4
.................... lcd_putc("\f"); 
155A:  MOVLW  AC
155B:  BSF    03.6
155C:  MOVWF  0D
155D:  MOVLW  01
155E:  MOVWF  0F
155F:  BCF    0A.4
1560:  BCF    03.6
1561:  CALL   310
1562:  BSF    0A.4
.................... lcd_putc("incorrect "); 
1563:  MOVLW  AD
1564:  BSF    03.6
1565:  MOVWF  0D
1566:  MOVLW  01
1567:  MOVWF  0F
1568:  BCF    0A.4
1569:  BCF    03.6
156A:  CALL   310
156B:  BSF    0A.4
.................... }} 
156C:  GOTO   5D9
....................  
.................... else if(num=='3') // encoder 
156D:  MOVF   30,W
156E:  SUBLW  33
156F:  BTFSS  03.2
1570:  GOTO   582
.................... { lcd_gotoxy(1,1); lcd_putc("\f");  encoder(); } 
1571:  MOVLW  01
1572:  MOVWF  61
1573:  MOVWF  62
1574:  BCF    0A.4
1575:  CALL   2D2
1576:  BSF    0A.4
1577:  MOVLW  B3
1578:  BSF    03.6
1579:  MOVWF  0D
157A:  MOVLW  01
157B:  MOVWF  0F
157C:  BCF    0A.4
157D:  BCF    03.6
157E:  CALL   310
157F:  BSF    0A.4
1580:  GOTO   163
1581:  GOTO   5D9
....................  
.................... else if(num=='4') // leds example 
1582:  MOVF   30,W
1583:  SUBLW  34
1584:  BTFSS  03.2
1585:  GOTO   597
.................... { lcd_gotoxy(1,1);lcd_putc("\f"); leds();} 
1586:  MOVLW  01
1587:  MOVWF  61
1588:  MOVWF  62
1589:  BCF    0A.4
158A:  CALL   2D2
158B:  BSF    0A.4
158C:  MOVLW  B4
158D:  BSF    03.6
158E:  MOVWF  0D
158F:  MOVLW  01
1590:  MOVWF  0F
1591:  BCF    0A.4
1592:  BCF    03.6
1593:  CALL   310
1594:  BSF    0A.4
1595:  GOTO   1A1
1596:  GOTO   5D9
....................  
.................... else if(num=='5') // uart  example  
1597:  MOVF   30,W
1598:  SUBLW  35
1599:  BTFSS  03.2
159A:  GOTO   5AC
.................... { lcd_gotoxy(1,1);lcd_putc("\f");uart();} 
159B:  MOVLW  01
159C:  MOVWF  61
159D:  MOVWF  62
159E:  BCF    0A.4
159F:  CALL   2D2
15A0:  BSF    0A.4
15A1:  MOVLW  B5
15A2:  BSF    03.6
15A3:  MOVWF  0D
15A4:  MOVLW  01
15A5:  MOVWF  0F
15A6:  BCF    0A.4
15A7:  BCF    03.6
15A8:  CALL   310
15A9:  BSF    0A.4
15AA:  GOTO   250
15AB:  GOTO   5D9
....................  
.................... else { 
.................... lcd_gotoxy(1,1); 
15AC:  MOVLW  01
15AD:  MOVWF  61
15AE:  MOVWF  62
15AF:  BCF    0A.4
15B0:  CALL   2D2
15B1:  BSF    0A.4
.................... lcd_putc("\f"); 
15B2:  MOVLW  B6
15B3:  BSF    03.6
15B4:  MOVWF  0D
15B5:  MOVLW  01
15B6:  MOVWF  0F
15B7:  BCF    0A.4
15B8:  BCF    03.6
15B9:  CALL   310
15BA:  BSF    0A.4
.................... lcd_putc("incorrect "); 
15BB:  MOVLW  B7
15BC:  BSF    03.6
15BD:  MOVWF  0D
15BE:  MOVLW  01
15BF:  MOVWF  0F
15C0:  BCF    0A.4
15C1:  BCF    03.6
15C2:  CALL   310
15C3:  BSF    0A.4
.................... lcd_gotoxy(1,2); 
15C4:  MOVLW  01
15C5:  MOVWF  61
15C6:  MOVLW  02
15C7:  MOVWF  62
15C8:  BCF    0A.4
15C9:  CALL   2D2
15CA:  BSF    0A.4
.................... lcd_putc("input "); 
15CB:  MOVLW  BD
15CC:  BSF    03.6
15CD:  MOVWF  0D
15CE:  MOVLW  01
15CF:  MOVWF  0F
15D0:  BCF    0A.4
15D1:  BCF    03.6
15D2:  CALL   310
15D3:  BSF    0A.4
.................... delay_ms(100);} 
15D4:  MOVLW  64
15D5:  MOVWF  63
15D6:  BCF    0A.4
15D7:  CALL   1C1
15D8:  BSF    0A.4
....................  
....................  
.................... } 
15D9:  SLEEP

Configuration Fuses:
   Word  1: 3F71   XT NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
